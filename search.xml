<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>接口测试基础</title>
      <link href="/2020/07/07/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/07/07/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要做接口测试？"><a href="#为什么要做接口测试？" class="headerlink" title="为什么要做接口测试？"></a>为什么要做接口测试？</h4><ul><li><p>在日常前后端开发中，他们之间为什么是独立完成的？</p></li><li><p>接口的由来：连接前后端，以及移动端</p></li><li><p>不同端的工作进度不一样，需要对最开始出来的接口，进行接口测试</p></li></ul><hr><h4 id="接口测试带来了哪些好处？"><a href="#接口测试带来了哪些好处？" class="headerlink" title="接口测试带来了哪些好处？"></a>接口测试带来了哪些好处？</h4><ul><li><p>比如调用第三方的接口，淘宝，银行，支付宝…，那么我们就要进行接口测试，以及验证数据</p></li><li><p>节约时间，缩短项目时间</p></li><li><p>提高工作效率</p></li><li><p>提高系统的稳定性</p></li></ul><hr><h4 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是接口？</h4><ul><li><p>http请求 -&gt; 接口 ，不断地操作系统 -&gt; 系统不断的去服务端，第三方服务调用接口</p></li><li><h6 id="接口的种类"><a href="#接口的种类" class="headerlink" title="接口的种类"></a>接口的种类</h6><ol><li>内部接口</li><li>外部接口</li><li>我们测试的接口，接收测试http，tcp请求</li></ol></li><li><h6 id="Get，Post请求是日常中，使用较多的接口类型"><a href="#Get，Post请求是日常中，使用较多的接口类型" class="headerlink" title="Get，Post请求是日常中，使用较多的接口类型"></a>Get，Post请求是日常中，使用较多的接口类型</h6><p> <img src="https://i.loli.net/2020/05/14/SvVYLXxai9QuWz2.jpg" alt="wps15.jpg"></p></li><li><h6 id="Get，Post的区别"><a href="#Get，Post的区别" class="headerlink" title="Get，Post的区别"></a>Get，Post的区别</h6><blockquote><p>理论上GET请求数据长度没有限制的，真正起到限制的是浏览器对其长度进行了限制。</p><p>POST请求理论上也是不限制大小的，真正对其大小进行限制的是服务器的处理程序能力</p></blockquote></li><li><h6 id="参数提交方式"><a href="#参数提交方式" class="headerlink" title="参数提交方式"></a>参数提交方式</h6></li></ul><blockquote><p>Post请求的数据是WebForm里面的，以表单的形式提交</p><p>Get请求的数据是在地址栏中，进行请求的</p><p>接口地址以？分隔开，后面就是数据，以&amp;连接符连接</p></blockquote><ul><li><h6 id="请求数据大小"><a href="#请求数据大小" class="headerlink" title="请求数据大小"></a>请求数据大小</h6></li></ul><blockquote><p>Get请求的数据相比Post是较少的</p><p>GET请求的URL长度根据不同的浏览器，会有不同的字节限制</p></blockquote><table><thead><tr><th>Browser</th><th>Length</th></tr></thead><tbody><tr><td>IE</td><td>URL &lt;= 2083  Path &lt;= 2048</td></tr><tr><td>Firefox</td><td>65536</td></tr><tr><td>Safari</td><td>80000以上</td></tr><tr><td>Opera</td><td>190000以上      超出最大抓取/索引字节长度 会报414</td></tr><tr><td>Chrome</td><td>8182</td></tr><tr><td>Apache Sever</td><td>8192</td></tr><tr><td>iis</td><td>16384</td></tr><tr><td>Perl Http:Daemon</td><td>至少8000</td></tr></tbody></table><ul><li><h6 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h6></li></ul><blockquote><p>Get请求的用户信息在URL栏中，安全性相比Post表单请求，安全性低</p></blockquote><h4 id="接口测试流程"><a href="#接口测试流程" class="headerlink" title="接口测试流程"></a>接口测试流程</h4><ul><li><p>一个简单的事情，需要认真，有条理的去执行</p></li><li><p>可能当时没有出错，谁又能保证以后不出错，尽量做好万全的准备</p></li></ul><h6 id="熟悉接口测试流程的好处："><a href="#熟悉接口测试流程的好处：" class="headerlink" title="熟悉接口测试流程的好处："></a>熟悉接口测试流程的好处：</h6><blockquote><p>以备面试所需</p><p>熟悉接下来的流程</p><p>掌握基础知识</p><p>面试时，通常基础知识问答较多</p></blockquote><h6 id="测试流程的重点："><a href="#测试流程的重点：" class="headerlink" title="测试流程的重点："></a>测试流程的重点：</h6><p><code>设计用例</code></p><ol><li>理清思路，避免漏测（不可进行随机测试）</li><li>提高测试效率</li><li>跟进测试进度</li><li>证明进行过测试（一种凭证）</li><li>跟进重复性工作</li><li>黑盒：需求文档</li><li>接口测试：需要开发提供的API文档</li></ol><h6 id="接口测试用例设计"><a href="#接口测试用例设计" class="headerlink" title="接口测试用例设计"></a>接口测试用例设计</h6><img src="https://i.loli.net/2020/05/14/brpugR3AKnjfk28.jpg" alt="wps16.jpg" style="zoom:200%;" /> <h4 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h4><ul><li><p>提高工作效率，不管是否上线</p></li><li><p>使用工具的目的</p></li></ul><h6 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h6><blockquote><p>10分钟测试10个get接口，使用不熟悉的loadrunner录制脚本，对接口进行参数化，然后查看日志结果。此时就不宜使用臃肿的测试工具</p></blockquote><ul><li><p>如何选择接口测试工具</p><blockquote><p>时间，简易程度，业务复杂度，测试员能力</p></blockquote></li></ul><h6 id="接口测试工具分类"><a href="#接口测试工具分类" class="headerlink" title="接口测试工具分类"></a>接口测试工具分类</h6><table><thead><tr><th>Tools</th><th>Purpose</th><th></th></tr></thead><tbody><tr><td>Httpwatch</td><td>HTTP</td><td>仅支持IE，firefox浏览器，看数据比较麻烦</td></tr><tr><td>Wireshark</td><td>TCP/HTTP</td><td>功能齐全，经过PC端的请求http/tcp，都能抓取到，所以数据量大，查看比较麻烦</td></tr><tr><td>Fiddler</td><td>HTTP</td><td>可直接抓取http请求，小巧，功能完善，启动快捷，代理方便</td></tr></tbody></table><h6 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h6><ul><li>Loadrunner</li></ul><blockquote><p>第一印象：是一个性能测试工具</p><p>功能强大，可以进行接口测试</p><p>所有性能测试都是基于http请求的</p><p>把接口按照http请求的格式，进行测试 </p><p>通过两个函数</p></blockquote><ul><li>Fidder</li></ul><blockquote><p>轻量级抓包兼测试工具</p></blockquote><ul><li>SoapUI</li></ul><blockquote><p>比较强大的测试工具，可以做接口，也可以做自动化</p><p>功能也比较齐全，返回的乱码可进行转换，打开接口文档对比</p></blockquote><ul><li>Jmeter</li></ul><blockquote><p>不仅仅是性能测试，可以使用http请求进行接口测试</p></blockquote><ul><li>Postman</li></ul><blockquote><p>测试中常用选择</p></blockquote><h6 id="接口测试工具-三剑客"><a href="#接口测试工具-三剑客" class="headerlink" title="接口测试工具-三剑客"></a>接口测试工具-<strong>三剑客</strong></h6><ul><li>Postman</li></ul><blockquote><p>导入body中的数据一定要仔细核对</p><p>如何自动反复测试带header的Post请求，并且针对线上，测试环境同一个数据进行测试。并对实际结果作比较，作为测试结果</p><p>各种类型接口测试</p><p>按需求添加cookie，header</p><p>操作记录清晰</p><p>多接口同时测试</p><p>方便回归</p><p>提高技能水平</p></blockquote><ul><li><p>Fiddler</p><p>简介：</p><p><code>是一款http协议代理调试工具，能够记录并检查电脑与互联网之间所有的http协议，设置断点，查看所有”进出”Fiddler的数据</code></p><p>工作原理：</p><p>   <img src="https://i.loli.net/2020/05/14/FB5q6WNy8RxQe1M.jpg" alt="wps17.jpg"> </p><p>运用步骤：</p><blockquote><p>查看接口请求方式</p><p>查看请求数据，响应数据</p><p>接口返回状态</p><p>设置代理（抓取移动端接口请求）</p><p>查看header，cookie</p><p>设置断点</p><p>添加筛选</p><p>接口测试</p></blockquote></li><li><p>Python自开发</p></li></ul><blockquote><p>工具没法满足需求时</p><p>安全性</p><p>业务限制</p><p>逻辑清晰-&gt;表达，理解能力强-&gt;看懂代码-&gt;会写代码-&gt;会改代码</p><p>测试流程</p><p>通过urllib urllib2 扩展库</p><p>定义接口地址</p><p>定义请求数据</p><p>整理请求数据</p><p>按照格式拼接，按照规定格式发送server</p><p>发送数据并获取返回结果    </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InterFace Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化基础</title>
      <link href="/2020/07/07/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2020/07/07/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><p><code>合格的自动化测试工程师 -&gt; 接口自动化测试框架</code></p><p><code>入门条件 -&gt;  设计-开发-重构框架</code></p><p><code>进阶之路：接口基础 -&gt; 接口开发 -&gt; Unittest与接口测试结合 -&gt; 设计，开发框架</code></p><h4 id="接口基础"><a href="#接口基础" class="headerlink" title="接口基础"></a>接口基础</h4><ul><li><h6 id="HTTP接口熟悉"><a href="#HTTP接口熟悉" class="headerlink" title="HTTP接口熟悉"></a>HTTP接口熟悉</h6></li><li><h6 id="常见接口介绍"><a href="#常见接口介绍" class="headerlink" title="常见接口介绍"></a>常见接口介绍</h6></li><li><h6 id="接口工具的使用"><a href="#接口工具的使用" class="headerlink" title="接口工具的使用"></a>接口工具的使用</h6></li><li><h6 id="接口测试基础的面试"><a href="#接口测试基础的面试" class="headerlink" title="接口测试基础的面试"></a>接口测试基础的面试</h6></li><li><h6 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h6><ul><li>使用Django，开发Get，Post请求</li><li>掌握Unittest与接口测试的结合</li><li>Unittest使用，断言，HTMLTestRunner，Case的管理，Request的引入使用</li></ul></li></ul><hr><h4 id="接口自动化测试框架从设计到开发"><a href="#接口自动化测试框架从设计到开发" class="headerlink" title="接口自动化测试框架从设计到开发"></a>接口自动化测试框架从设计到开发</h4><ul><li><h6 id="设计框架"><a href="#设计框架" class="headerlink" title="设计框架"></a>设计框架</h6></li><li><h6 id="根据框架，设计工具封装"><a href="#根据框架，设计工具封装" class="headerlink" title="根据框架，设计工具封装"></a>根据框架，设计工具封装</h6></li><li><h6 id="基类封装"><a href="#基类封装" class="headerlink" title="基类封装"></a>基类封装</h6></li><li><h6 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h6></li><li><h6 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h6></li><li><h6 id="回写测试结果"><a href="#回写测试结果" class="headerlink" title="回写测试结果"></a>回写测试结果</h6></li><li><h6 id="解决数据依赖"><a href="#解决数据依赖" class="headerlink" title="解决数据依赖"></a>解决数据依赖</h6></li><li><h6 id="结果统计"><a href="#结果统计" class="headerlink" title="结果统计"></a>结果统计</h6></li><li><h6 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h6></li><li><h6 id="发送报告"><a href="#发送报告" class="headerlink" title="发送报告"></a>发送报告</h6></li><li><h6 id="常见接口测试查缺补漏"><a href="#常见接口测试查缺补漏" class="headerlink" title="常见接口测试查缺补漏"></a>常见接口测试查缺补漏</h6></li><li><h6 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h6></li><li><h6 id="操作cookie"><a href="#操作cookie" class="headerlink" title="操作cookie"></a>操作cookie</h6></li></ul><hr><h4 id="接口基础面试"><a href="#接口基础面试" class="headerlink" title="接口基础面试"></a>接口基础面试</h4><ul><li><h6 id="如何理解接口？"><a href="#如何理解接口？" class="headerlink" title="如何理解接口？"></a>如何理解接口？</h6></li></ul><blockquote><p>前后端解耦，需要一个桥梁，负责前后端传输数据</p></blockquote><ul><li><h6 id="接口测试和功能测试的区别"><a href="#接口测试和功能测试的区别" class="headerlink" title="接口测试和功能测试的区别"></a>接口测试和功能测试的区别</h6></li></ul><blockquote><p>是功能测试的一种，功能测试的定义非常广泛</p><p>自动化属于功能测试，无论是接口还是自动化测试，都是模拟用户的操作</p><p>接口测试只是模拟用户发送数据，只是没有经过前端/客户端</p><p>自动化模拟用户操作，减去了手工操作，通过脚本去实现</p><p>在国内来说，技术能力可能会比功能测试好-含金量不同</p></blockquote><ul><li>常见的接口类型</li></ul><blockquote><p>Post，get，put，delete</p></blockquote><ul><li>接口是如何传递参数</li></ul><blockquote><p>Get请求?前方为URL地址，后方为消息主体/请求数据</p><p>Post请求是以WebFrom/表单的形式提交数据</p></blockquote><ul><li>如何测试一个接口？</li></ul><blockquote><p>Fiddler  Postman  soapUI  Loadrunner  Jmeter</p><p>工具只是一种实现方式而已</p><p>怎么简单怎么做（主要是效率）</p></blockquote><hr><h4 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h4><p>(1) 为什么模拟请求</p><p>① 解耦很重要</p><p>② 并行开发很重要（效率第一）</p><p>③ 使用Fiddler模拟请求</p><p>1) 进入Composer工具栏，传入对应headers，body</p><p>④ 使用fiddler模拟响应</p><p>1) 进入AutoResponder工具栏，传入对应url，以及对应的response数据</p><p>\6. 搭建Django框架-测试环境—工程项目</p><p>(1) 开发web端是比较实用的</p><p>(2) 安装Django框架</p><p>① 在线安装：pip install Django  ==指定版本</p><p>② 离线安装：python setup.py install</p><p>1) 官网下载所需版本</p><p>2) 解压，然后在cmd中，进入存放目录，输入命令</p><p>(3) 在终端输入命令：django-admin startproject HelloWorld（项目名可修改）</p><p><img src="https://i.loli.net/2020/05/14/Za794SwAxVEYXbf.jpg" alt="wps18.jpg"> </p><p>① 外部HelloWorld/根目录是您的项目的容器。它的名字对Django无关紧要。您可以将其重命名为您喜欢的任何名称。</p><p>② manage.py：一个命令行实用程序，可让您以各种方式与该Django项目进行交互。您可以manage.py在<a href="https://docs.djangoproject.com/en/3.0/ref/django-admin/" target="_blank" rel="noopener">django-admin和manage.py中</a>阅读有关的所有详细信息 。</p><p>③ 内部HelloWorld/目录是项目的实际Python包。它的名称是Python包名称，您需要使用它来导入其中的任何内容（例如HelloWorld.urls）。</p><p>④ HelloWorld/<strong>init</strong>.py：一个空文件，告诉Python该目录应视为Python软件包。如果您是Python初学者，请在Python官方文档中阅读<a href="#tut-packages">有关包的更多信息</a>。</p><p>⑤ HelloWorld/settings.py：此Django项目的设置/配置。 <a href="https://docs.djangoproject.com/en/3.0/topics/settings/" target="_blank" rel="noopener">Django设置</a>将告诉您所有设置的工作方式。</p><p>⑥ HelloWorld/urls.py：此Django项目的URL声明；Django支持的网站的“目录”。您可以在<a href="https://docs.djangoproject.com/en/3.0/topics/http/urls/" target="_blank" rel="noopener">URL调度</a>程序中阅读有关URL的更多信息。</p><p>⑦ HelloWorld/asgi.py：与ASGI兼容的Web服务器为您的项目提供服务的入口点。有关更多详细信息，请参见<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/" target="_blank" rel="noopener">如何使用ASGI</a>进行<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/" target="_blank" rel="noopener">部署</a>。</p><p>⑧ HelloWorld/wsgi.py：与WSGI兼容的Web服务器为您的项目提供服务的入口点。有关更多详细信息，请参见<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/" target="_blank" rel="noopener">如何使用WSGI</a>进行<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/" target="_blank" rel="noopener">部署</a></p><p>(4) 运行django</p><p>① 在根目录下，在终端中运行：python manage.py runserver 127.0.0.1:8000</p><p>② 在browser中，输入127.0.0.1:8000</p><p>\7. 创建工程应用app</p><p>(1) 创建新的app，使用系统模块manage</p><p>① 回到根目录，进入终端：python manage.py startapp name</p><p>(2) 原理</p><p>① 需要知道地址怎么到server的，访问urls.py中的方法，执行urlpatterns中的方法</p><p>② 创建的app中的views.py模块中，定义方法</p><p><img src="https://i.loli.net/2020/05/14/a1u3CwOQHek2FWR.jpg" alt="wps19.jpg"> </p><p>③ 在urls.py模块中，引入login方法，urlpatterns变量中，调用login方法</p><p><img src="https://i.loli.net/2020/05/14/MQjWEqdRBs8uaeP.jpg" alt="wps20.jpg"> </p><p>\1. 用户在敲下你的网址并回车，生成请求</p><p>\2. 请求传递到urls.py；Django去urlpatterns中匹配链接（Django会在匹配到的第一个就停下来）</p><p>\3. 一旦匹配成功，Django便会给出相应的view页面（该页面可以为一个Python的函数，或者基于view（Django内置的）的类），也就是用户看到的页面</p><p>\4. 若匹配失败，则出现错误的页面</p><p>\5. 一个工程项目，有很多个APP，每个APP都是工程组成的一部分</p><p>\8. 开发接口</p><p>(1) 框架</p><p>① 都是基于代码</p><p>② 框架就是把所有的代码进行整合，写的简洁一些，逻辑是没有改变的</p><p>③ 无非是多个中间服务商，Apache，Nginx之类的</p><p>④ 只需要知道url跳转到哪儿，在哪儿解析，Response什么信息</p><p>⑤ 真正的API在views模块里面</p><p>⑥ 注意事项：</p><p>1) 代理端口需区分，否则会冲突 </p><p>2) HTML中form表单，与from区分</p><p>3) HTML中路径需以/斜杠结尾</p><p>\9. Unittest</p><p>(1) 创建一个类的时候，继承Unittest框架中TestCase类</p><p>(2) 内置方法</p><p>① setUp：每次方法之前执行</p><p>② tearDown：每次方法之后执行</p><p>③ sefUpClass：类执行前执行</p><p>④ tearDownClass：类执行后执行</p><p>⑤ Test_XX：单词在前的case方法，缺少test则不会运行</p><p>(3) 断言–assert</p><p>① assertEqual：x == y ？None : z</p><p>② assertNotEqual：x != y ？None : z</p><p>③ assertTrue：type(x) == True ? None : z</p><p>(4) 全局变量</p><p>① 相比类变量更加快捷</p><p>② 命名方式：Globals()[‘变量名’] 解决依赖</p><p>(5) 跳过case执行：</p><p>① 使用语法糖：@ unittest.skip(‘case’)</p><p>(6) 创建容器</p><p>① 创建语法：Suite = unittest.TestSuite()</p><p>② 添加case：Suite.addTest(类名(casename))</p><p>③ 可添加多个case</p><p>④ 执行容器：unittest.TextTestRunner().run(容器名)</p><p>(7) 结合HTMLTestRunner，生成TestReport</p><p>① Google-&gt;Python3 HTMLTestRunner，最好是GitHub上面的</p><p>② 创建HTMLTestRunner.py，移至Python-&gt;lib目录</p><p>③ 在case文件中，引入HTMLTestRunner模块</p><p>(8) Unittest之面试</p><p>① 如何使用Python开发测试框架</p><p>1) 语言：Python</p><p>2) 接口：使用requests第三方库</p><p>3) 管理case：unittest框架-断言-skipcase-suite容器-依赖关系</p><p>4) 报告：HTMLTestRunner</p><p>5) 数据管理：Excel，MySql</p><p>6) Case执行：持续集成或批处理文件</p><p>(9) 建议</p><p>① Unittest中，case是按照ascll码比较，进行升序执行</p><p>② 尽量减少依赖执行</p><p>③ GET请求URL与Data分离传参，无响应</p><p>④ Globals()[‘变量’]  = data 下个case调用会报错 </p><p>\10. Mock服务</p><p>(1) 以代码来实现自动响应请求的功能，模拟返回数据</p><p>(2) 引入mock</p><p>① Import unittest.mock</p><p>(3) 使用方法</p><p>① mock_name = mock.Mock(return_value=模拟数据)</p><p>② 请求方法 =  mock_name(改变返回模拟数据)</p><p>③ 示例：</p><p>​      mock_data = mock.Mock(return_value=response_data)</p><p>​    method = mock_data</p><p>​    res = method(request_data, url, method)</p><p>(4) 重构封装mock</p><p>① 示例：</p><p># 封装mock-method</p><p>from unittest import mock</p><p>def mock_test(mock_method, url, method, request_data=None, response_data=None):</p><p>  if response_data == None:</p><p>​    res = mock_method(url, method, response_data)</p><p>​    return res</p><p>  else:</p><p>​    mock_data = mock.Mock(return_value=response_data)</p><p>​    mock_method = mock_data</p><p>​    res = mock_method(request_data, url, method)</p><p>​    return res</p><p>\11. 设计接口自动化测试框架</p><p>(1) Case过多，避免繁琐操作</p><p>(2) 不排除某些需求，设定特殊的值，而手动添加</p><p>(3) 编写接口测试用例</p><p>① <img src="https://i.loli.net/2020/05/14/4GwtTXS5FRcCquj.jpg" alt="wps21.jpg"></p><p>(4) 需要考虑的点</p><p>① 接口地址</p><p>② 请求数据</p><p>③ 接口类型</p><p>④ 预期结果</p><p>⑤ Header - cookie</p><p>⑥ 数据依赖–接口自动化的难点</p><p>(5) 操作Excel</p><p>① 定义一个类</p><p>② <img src="https://i.loli.net/2020/05/14/O7Kc5nXN3WATsZR.jpg" alt="wps22.jpg"></p><p>③ 重构封装excel函数</p><p>1) 封装request_data, header</p><p>2) 封装调用类</p><p>④ 封装request类</p><p>⑤ 对response_data，进行格式化</p><p>1) Json.dumps(response, ensure_ascii=False, intent=2, sort_keys=True)</p><p>2) 使用ensure_ascii的注意事项：</p><p>a. json_dumps(dict)时，如果dict包含有汉字，一定加上ensure_ascii=False。否则按参数默认值True，意思是保证dumps之后的结果里所有的字符都能够被ascii表示，汉字在ascii的字符集里面，因此经过dumps以后的str里，汉字会变成对应的unicode。</p><p>\12. 写入excel测试结果</p><p>(1) 判断接口返回状态</p><p>① 接口是否通畅</p><p>1) 调用status_code方法</p><p>\13. 引入jsonpath_rw 第三方库</p><p>(1) 从第三方库中引入jsonpath，parse 方法</p><p>① B = {‘foo’: [{‘baz’: ‘news’}, {‘baz’: ‘music’}]}</p><p>(2) 赋予规则</p><p>① A = parse(‘foo[*].data’)</p><p>(3) 解析数据</p><p>① C = A.find(b)</p><p>(4) 使用列表推导式，获取数据</p><p>① Data = [match.value for match in C][0] index get content</p><p>\14. </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Automation InterFace Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础命令</title>
      <link href="/2020/06/30/Git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/30/Git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一．Git基础"><a href="#一．Git基础" class="headerlink" title="一．Git基础"></a>一．<strong>Git基础</strong></h3><h4 id="1．Git介绍"><a href="#1．Git介绍" class="headerlink" title="1．Git介绍"></a>1．<strong>Git介绍</strong></h4><blockquote><p>Git是目前世界上最先进的分布式版本控制系统</p></blockquote><ul><li>版本控制系统：</li></ul><blockquote><p>记录每个迭代版本的信息</p></blockquote><table><thead><tr><th>版本号</th><th>文件名</th><th>操作用户</th><th>日志</th><th>修改时间</th></tr></thead><tbody><tr><td>1</td><td>Test.py</td><td>well</td><td>修改标题</td><td>2020/04/18/17:15</td></tr><tr><td>2</td><td>Test.py</td><td>jack</td><td>优化性能</td><td>2020/04/18/18:00</td></tr><tr><td>3</td><td>Test.py</td><td>esion</td><td>修复bug</td><td>2020/04/18/19:15</td></tr><tr><td>4</td><td>Test.py</td><td>jack</td><td>功能更新</td><td>2020/04/18/20:15</td></tr></tbody></table><hr><h4 id="2．Git与Github"><a href="#2．Git与Github" class="headerlink" title="2．Git与Github"></a>2．<strong>Git与Github</strong></h4><h6 id="2-1-两者区别"><a href="#2-1-两者区别" class="headerlink" title="2.1.两者区别"></a><strong>2.1.两者区别</strong></h6><ul><li>Git </li></ul><blockquote><p>是一个分布式版本控制系统，简单来说它就是一个软件，用于记录一个或多干个文件迭代信息，以便将来查阅某个版本修订情况的软件</p></blockquote><ul><li>Github </li></ul><blockquote><p>是一个为用户提供Git服务的网站，简单说就是一个可以存放代码的地方，也可以是其他东西，Github除了提供管理Git的Web界面外，还提供了订阅，关注，讨论组，在线编辑器等丰富的功能。 Github被称之为全球最大的基友网站。</p></blockquote><hr><h4 id="3．Git安装"><a href="#3．Git安装" class="headerlink" title="3．Git安装"></a>3．<strong><em>Git安装</em></strong></h4><h6 id="3-1-下载安装包，进行安装"><a href="#3-1-下载安装包，进行安装" class="headerlink" title="3.1.下载安装包，进行安装"></a><strong><em>3.1.下载安装包，进行安装</em></strong></h6><h6 id="3-2-默认安装即可，最后的view就不要勾选了"><a href="#3-2-默认安装即可，最后的view就不要勾选了" class="headerlink" title="3.2.默认安装即可，最后的view就不要勾选了"></a><strong><em>3.2.默认安装即可，最后的view就不要勾选了</em></strong></h6><hr><hr><h3 id="二．Git的使用"><a href="#二．Git的使用" class="headerlink" title="二．Git的使用"></a>二．<strong><em>Git的使用</em></strong></h3><h4 id="1．本地仓库"><a href="#1．本地仓库" class="headerlink" title="1．本地仓库"></a>1．<strong><em>本地仓库</em></strong></h4><h6 id="1-1-工作流程"><a href="#1-1-工作流程" class="headerlink" title="1.1. 工作流程"></a><strong>1.1.</strong> <strong><em>工作流程</em></strong></h6><ul><li>Git本地操作的三个区域-&gt;示意图：</li></ul><p><img src="https://i.loli.net/2020/05/14/pAbHg8SUZWqTkL6.jpg" alt="wps35.jpg"> </p><ul><li>工作流程-&gt;示意图：</li></ul><p><img src="https://i.loli.net/2020/05/14/qlN3yrPaQ8kc56F.jpg" alt="wps36.jpg"> </p><h6 id="1-2-本地仓库操作"><a href="#1-2-本地仓库操作" class="headerlink" title="1.2.本地仓库操作"></a>1.2.<strong>本地仓库操作</strong></h6><blockquote><p>什么是仓库呢？仓库又名为版本库，英文名repository，可以简单的理解成是一个目录，<br>用于存放代码，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，<br>删除等变更状态Git都能跟踪到。</p></blockquote><ul><li>在安装好后首次使用需要进行全局配置,进入Git bash here 进入Git命令行窗口，输入以下命令：</li></ul><pre><code>Config --global user.name “xxx”  配置用户名Config --global user.email “xxx”  配置邮箱</code></pre><blockquote><p>在多人协作项目中，用于身份的甄别</p></blockquote><ul><li>创建仓库</li></ul><blockquote><p>当我们需要让Git去管理某个新项目/已存在的项目，就需要创建仓库了。<br>注意，创建仓库的目录不一定要求是空目录，选择一个非空目录也是可以的，<br>但是不建议在现有的项目上来学习Git。</p></blockquote><ul><li>创建空目录</li></ul><pre><code>Mkdir file_name</code></pre><ul><li><p>进入目录</p></li><li><p>Git仓库初始化</p></li></ul><pre><code>Git init</code></pre><blockquote><p>生成git的隐式目录</p></blockquote><h6 id="1-3-Git常用指令"><a href="#1-3-Git常用指令" class="headerlink" title="1.3. \Git常用指令**"></a><strong>1.3.</strong> <strong><em>\</em>Git常用指令**</strong></h6><ul><li>查看当前状态</li></ul><pre><code>git status</code></pre><ul><li><p>添加至缓存区</p><p><em>添加一个文件</em></p><pre><code>git add file_name</code></pre><p><em>添加多个文件</em></p><pre><code>git add file_1 file_2 file_3</code></pre><p><em>添加全部文件</em></p><pre><code>git add .</code></pre></li></ul><ul><li><p>移除缓存区文件</p><p><em>移出一个文件</em></p><pre><code>git rm -r --cached file_name</code></pre><p><em>移出多个文件</em></p><pre><code>git rm -r --cached .</code></pre><p><em>移出全部文件</em></p><pre><code>git rm -r --cached .idea</code></pre></li></ul><ul><li><p>提交至版本库</p><pre><code>git commit -m “更新内容描述”</code></pre></li></ul><hr><h6 id="1-4-版本回退"><a href="#1-4-版本回退" class="headerlink" title="1.4.版本回退"></a>1.4.<strong><em>版本回退</em></strong></h6><ul><li><p>查看版本，确定需要回到的时间点</p></li><li><p>版本号仅会显示当前，以及当前以前的版本信息</p></li></ul><blockquote><p>commit bc22b1d47fe55db8901129da1f6c74fdbbddd5b8 (HEAD -&gt; master) 目前版本</p></blockquote><ul><li><p>获得详细版本状态信息</p><pre><code>git log</code></pre></li><li><p>获得版本提交编号，与注释内容，一行显示</p><pre><code>git log --pretty=oneline</code></pre></li><li><p>回退</p><pre><code>git reset --hard 版本号</code></pre></li><li><p>回退至历史版本后，在回退到当前，则需要查看历史操作，得到想要commit_id</p><pre><code>git reflog</code></pre></li></ul><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><ul><li><p>回退各个时间段的版本，需获得commit id，进行 git reset –hard commit_id</p></li><li><p>再次回到当前版本，需要进行reflog直接获得历史操作，以及获得7位commit_id</p></li><li><p>commit_id可以不用输入完整，git会自动识别，但也不能太少，可能会出现重复，至少写前4位字符</p></li></ul><p>1.5. <strong>忽略文件</strong></p><ul><li>应用场景</li></ul><blockquote><p>在项目目录下有很多万年不变的文件目录，例如css，js，images等，<br>或者还有一些目录即便有改动，我们也不想让其提交到线上仓库。</p></blockquote><ul><li>实现流程</li></ul><blockquote><p>忽略文件需要新建一个名为.gitignore的规则文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录与子目录生效</p></blockquote><p><em>注意：该文件没有文件名，没办法直接在windows目录下创建，可以通过命令行创建。</em></p><table><thead><tr><th>常见规则</th><th></th></tr></thead><tbody><tr><td><em>过滤整个子目录</em></td><td>/mtk</td></tr><tr><td><em>过滤当前目录与子目录中.zip文件</em></td><td>*.zip</td></tr><tr><td><em>过滤具体文件</em></td><td>/mtk/.doc</td></tr><tr><td><em>不过滤该文件</em></td><td>! Test.py</td></tr></tbody></table><ul><li><p>创建过滤文件</p><pre><code>touch .gitignore</code></pre></li></ul><h4 id="2-远程仓库"><a href="#2-远程仓库" class="headerlink" title="2.远程仓库"></a>2.<strong>远程仓库</strong></h4><p><code>线上仓库的操作学习以GIthub为例</code></p><h6 id="线上仓库创建，两种常规使用方式"><a href="#线上仓库创建，两种常规使用方式" class="headerlink" title="线上仓库创建，两种常规使用方式"></a>线上仓库创建，两种常规使用方式</h6><ul><li><p>基于http协议</p><ol><li><p><code>创建空目录，名称就称为WellHome</code></p><pre><code>Mkdir WellHome</code></pre></li><li><p><code>使用clone指令，克隆线上仓库到本地</code></p><pre><code>git clone source.git</code></pre></li><li><p><code>仓库基本操作（提交暂存区，提交本地仓库，提交线上仓库，拉取线上仓库）</code></p><p>提交当线上仓库的指令</p><p><em>git push</em></p><p>若提交后，返回requested 403 因为需要鉴权，则需要权限</p><p><em>需要修改配置文件，在请求url 中添加用户名与密码</em></p></li><li><p>拉取线上仓库</p><p>git pull</p></li></ol></li></ul><blockquote><p>在每天工作的第一件事</p><p><em>git pull</em> </p><p>每天下班时做的最后一件事</p><p><em>git push</em></p></blockquote><ul><li><p>基于SSH协议</p><p><code>需安装OpenSSH（推荐使用）</code></p></li></ul><blockquote><p>Https与SSH协议区别：该方式与前面https方式相比，至少影响github对于用户的身份鉴权方式，对于git    的具体操作（如提交本地，添加注释，提交远程等操作）没有任何影响</p></blockquote><ul><li><p>生成公私钥对指令（需自行安装OpenSSH）</p><p><em>ssh-keygen -t rsa -C “注册邮箱”，直接回车继续，返回提示生成的公私钥对的路径</em></p></li><li><p>进入提示目录下，找到公钥文件，添加到github中，并编写title</p></li><li><p>clone 仓库</p><p><em>git clone  git_ssh地址 — 返回提示yes or no 输入yes即可</em></p></li></ul><h6 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h6><ul><li>分支示意图</li></ul><p><img src="https://i.loli.net/2020/05/14/oe5Vhbg8pRmHsGA.jpg" alt="wps37.jpg"> </p><blockquote><p>​    在版本回退的操作中，每次提交后都会有记录，Git把它们串成时间线，形成类型时间轴的存在，这个时间轴就是一个分支，我们称为master分支（主分支）。<br>​    在多人团队协作开发的项目中，一个分支是无法满足多人同时开发的需求的，并且分支上工作并不影响他人正常使用，会更加安全，Git鼓励开发者使用分支去完成开发任务。</p></blockquote><table><thead><tr><th>分支相关指令</th><th></th></tr></thead><tbody><tr><td>查看分支</td><td>git branch</td></tr><tr><td>创建分支</td><td>git branch 名称</td></tr><tr><td>切换分支</td><td>git checkout 名称</td></tr><tr><td>删除分支</td><td>git branch -d 名称</td></tr><tr><td>合并分支</td><td>git merge 被合并名称</td></tr></tbody></table><h6 id="冲突的产生与解决"><a href="#冲突的产生与解决" class="headerlink" title="冲突的产生与解决"></a>冲突的产生与解决</h6><blockquote><p>当线上与本地仓内容不一致时，git会检测出来，并提示让你先pull<br>Pull后，git会自动合并代码在改文件中。</p></blockquote><ul><li><p>解决方法</p><p><em>与变更文件同事沟通，再进行操作</em></p></li><li><p>提醒</p><p><em>上班后同步线上代码</em></p></li></ul><h6 id="图形化管理工具"><a href="#图形化管理工具" class="headerlink" title="图形化管理工具"></a>图形化管理工具</h6><ul><li><p>Github for Desktop</p><p><u>Github出品，功能完善，界面简洁，使用方便。</u></p></li><li><p>Source tree</p><p><u>老牌Git GUI管理工具，也号称最好用的管理工具，功能丰富，基本操作和高级操作都非常流畅，适合初学者。</u></p></li><li><p>TortoiseGit</p><p><u>对于熟悉SVN的开发人员来说，这个小乌龟是非常友善了，简称tgit，中文名海龟Git，</u></p><p><u>它与前辈TortoiseSVN都是非常优秀的开源版本控制客户端软件。</u></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Settings 组件分析</title>
      <link href="/2020/06/28/Settings%20%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/28/Settings%20%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="COOKIES-ENABLED"><a href="#COOKIES-ENABLED" class="headerlink" title="COOKIES_ENABLED"></a>COOKIES_ENABLED</h4><p> 进入 scrapy 包 -&gt; downloadermiddlewares 子包 -&gt; cookies模块中</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CookiesMiddleware</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""This middleware enables working with sites that need cookies"""</span>    <span class="token comment" spellcheck="true"># 使用该中间件可以处理需要Cookie的网站</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>jars <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>CookieJar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>debug <span class="token operator">=</span> debug    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这是一个组件，作用于所有的scrapy Request</span>        <span class="token comment" spellcheck="true"># 通过这个组件，提取前一个Request中的cookie，并加入下一个Request cookie中去</span>        <span class="token keyword">if</span> <span class="token operator">not</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getbool<span class="token punctuation">(</span><span class="token string">'COOKIES_ENABLED'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotConfigured        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getbool<span class="token punctuation">(</span><span class="token string">'COOKIES_DEBUG'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'dont_merge_cookies'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span></code></pre></li></ul><hr><hr><ul><li><h4 id="USER-AGENT"><a href="#USER-AGENT" class="headerlink" title="USER_AGENT"></a>USER_AGENT</h4><p>设置全局USER_AGENT，与DOWNLOADERMIDDLEWARES 配合</p><pre><code>USER_AGENT = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&#39;</code></pre></li></ul><ul><li><h4 id="DOWNLOADER-MIDDLEWARES"><a href="#DOWNLOADER-MIDDLEWARES" class="headerlink" title="DOWNLOADER_MIDDLEWARES"></a>DOWNLOADER_MIDDLEWARES</h4><p> 赋予每个Scrapy Request USER-AGENT</p><pre><code>DOWNLOADER_MIDDLEWARES = {#    &#39;ArticleSpider.middlewares.ArticlespiderDownloaderMiddleware&#39;: 543,    &#39;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&#39;: 2}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计Lagou表结构</title>
      <link href="/2020/06/28/%E8%AE%BE%E8%AE%A1%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2020/06/28/%E8%AE%BE%E8%AE%A1%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-表结构设计"><a href="#MySQL-表结构设计" class="headerlink" title="MySQL 表结构设计"></a>MySQL 表结构设计</h3><ul><li><p>分析网站数据，制定合理的表结构</p><p><img src="https://i.loli.net/2020/06/18/4IemkD7ZC6vVpzg.png" alt="如图所示"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CrawlSpider源码分析</title>
      <link href="/2020/06/28/CrawlSpider%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/28/CrawlSpider%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="查看可用-scrapy-模板"><a href="#查看可用-scrapy-模板" class="headerlink" title="查看可用 scrapy 模板"></a>查看可用 scrapy 模板</h2><ul><li><h4 id="进入项目目录，输入以下命令"><a href="#进入项目目录，输入以下命令" class="headerlink" title="进入项目目录，输入以下命令"></a>进入项目目录，输入以下命令</h4><pre><code>scrapy genspider --list</code></pre><hr></li><li><h4 id="可用模板列表"><a href="#可用模板列表" class="headerlink" title="可用模板列表"></a>可用模板列表</h4><pre class=" language-python"><code class="language-python">Available templates<span class="token punctuation">:</span>  basic          <span class="token comment" spellcheck="true"># 默认模板</span>  crawl          <span class="token comment" spellcheck="true"># 全站爬取</span>  csvfeed      <span class="token comment" spellcheck="true"># CSV 源模板</span>  xmlfeed      <span class="token comment" spellcheck="true"># XML 源模板</span></code></pre><hr></li><li><h6 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h6></li></ul><ul><li><h6 id="crawl"><a href="#crawl" class="headerlink" title="crawl"></a>crawl</h6><p>CrawlSpider 是爬取那些具有一定规则网站的常用的爬虫，它基于Spider并有一些独特属性</p><ul><li><p>基于 Spider 类，进一步封装</p></li><li><p>rules: 是Rule 对象的集合，用于匹配目标网站并排除干扰</p></li><li><p>parse_start_url: 用于爬取起始响应，必须要返回item，Request中的一个</p></li><li><p>_parse_response: 是CrawlSpider 的核心方法</p></li></ul><blockquote><p><em>创建CrawlSpider</em></p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span> <span class="token operator">></span> scrapy genspider <span class="token operator">-</span>t crawl spider_name spider_url</code></pre></blockquote><p><strong>注意：在CrawlSpider中，不可以进行重构 parse 方法，因为它已经被CrawlSpider占用，可以使用parse_strat_url方法替代</strong></p></li><li><h6 id="csvfeed"><a href="#csvfeed" class="headerlink" title="csvfeed"></a>csvfeed</h6></li></ul><ul><li><h6 id="xmlfeed"><a href="#xmlfeed" class="headerlink" title="xmlfeed"></a>xmlfeed</h6></li></ul><hr><hr><ul><li><h4 id="添加-source-root-gt-settings-配置中"><a href="#添加-source-root-gt-settings-配置中" class="headerlink" title="添加 source root -&gt; settings 配置中"></a>添加 source root -&gt; settings 配置中</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加所属目录 -> PythonPath 中</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><h4 id="CrawlSpider-源码逻辑概述"><a href="#CrawlSpider-源码逻辑概述" class="headerlink" title="CrawlSpider 源码逻辑概述"></a>CrawlSpider 源码逻辑概述</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LagouSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'lagou'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.lagou.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.lagou.com/'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment" spellcheck="true"># 参数为可迭代对象</span>        <span class="token comment" spellcheck="true"># rule 实例，LinkExtractor (链接提取器) 实例</span>        <span class="token comment" spellcheck="true"># 可以更改域名,  一般大型网站都有负载均衡处理, 在某个城市进行CDN, 每个城市的URL/IP地址都是不一样的, 获取到多个城市的URL后,可以进行随机IP访问，减少了IP被检测的概率</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span>r<span class="token string">'Items/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_job</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""解析拉勾网职位信息"""</span>        item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span>        <span class="token comment" spellcheck="true">#item['name'] = response.xpath('//div[@id="name"]').get()</span>        <span class="token comment" spellcheck="true">#item['description'] = response.xpath('//div[@id="description"]').get()</span>        <span class="token keyword">return</span> item<span class="token keyword">class</span> <span class="token class-name">CrawlSpider</span><span class="token punctuation">(</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在 CrawlSpider 初始化时, 调用 compile_rules 方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_compile_rules<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_parse_response<span class="token punctuation">(</span>response<span class="token punctuation">,</span> self<span class="token punctuation">.</span>parse_start_url<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_start_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">process_results</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> results    <span class="token keyword">def</span> <span class="token function">_build_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rule_index<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Request<span class="token punctuation">(</span>            url<span class="token operator">=</span>link<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            callback<span class="token operator">=</span>self<span class="token punctuation">.</span>_callback<span class="token punctuation">,</span>            errback<span class="token operator">=</span>self<span class="token punctuation">.</span>_errback<span class="token punctuation">,</span>            meta<span class="token operator">=</span>dict<span class="token punctuation">(</span>rule<span class="token operator">=</span>rule_index<span class="token punctuation">,</span> link_text<span class="token operator">=</span>link<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_requests_to_follow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""要求遵循"""</span>        <span class="token comment" spellcheck="true"># 判断是否为 HTMLResponse</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>response<span class="token punctuation">,</span> HtmlResponse<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 新建一个 set 类型局部变量, 对 response 中的 url 进行去重</span>        seen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通过 enumerate 把 _rules 改变为一个可迭代的对象</span>        <span class="token keyword">for</span> rule_index<span class="token punctuation">,</span> rule <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_rules<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 把 response 传递给 link_extractor 类 extract_links 方法, 提取出具体的 link</span>            links <span class="token operator">=</span> <span class="token punctuation">[</span>lnk <span class="token keyword">for</span> lnk <span class="token keyword">in</span> rule<span class="token punctuation">.</span>link_extractor<span class="token punctuation">.</span>extract_links<span class="token punctuation">(</span>response<span class="token punctuation">)</span>                     <span class="token keyword">if</span> lnk <span class="token operator">not</span> <span class="token keyword">in</span> seen<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 自定义 process_links 方法, 传递给 Rule 类, 抽取出 link 添加至 set 中</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> rule<span class="token punctuation">.</span>process_links<span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">:</span>                seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>link<span class="token punctuation">)</span>                request <span class="token operator">=</span> self<span class="token punctuation">.</span>_build_request<span class="token punctuation">(</span>rule_index<span class="token punctuation">,</span> link<span class="token punctuation">)</span>                <span class="token keyword">yield</span> rule<span class="token punctuation">.</span>_process_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        rule <span class="token operator">=</span> self<span class="token punctuation">.</span>_rules<span class="token punctuation">[</span>response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'rule'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_parse_response<span class="token punctuation">(</span>response<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>callback<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>cb_kwargs<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>follow<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_errback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">:</span>        rule <span class="token operator">=</span> self<span class="token punctuation">.</span>_rules<span class="token punctuation">[</span>failure<span class="token punctuation">.</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'rule'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_handle_failure<span class="token punctuation">(</span>failure<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>errback<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_parse_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> cb_kwargs<span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        CrawlSpider 中核心方法        :param response:        :param callback: 回调方法名 self.parse_start_url        :param cb_kwargs: 获取 parse_start_url 返回的参数        :param follow:        :return:        """</span>        <span class="token keyword">if</span> callback<span class="token punctuation">:</span>            cb_res <span class="token operator">=</span> callback<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token operator">**</span>cb_kwargs<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 交由 process_results 方法</span>            cb_res <span class="token operator">=</span> self<span class="token punctuation">.</span>process_results<span class="token punctuation">(</span>response<span class="token punctuation">,</span> cb_res<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对返回结果，进行迭代(抛出 Item，交给 Scrapy 进行传递)</span>            <span class="token keyword">for</span> request_or_item <span class="token keyword">in</span> iterate_spider_output<span class="token punctuation">(</span>cb_res<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> request_or_item        <span class="token comment" spellcheck="true"># CrawlSpider 核心中的核心, 默认进行跟随链接, 改变follow/_follow_links bool 值, 决定是否跟随</span>        <span class="token keyword">if</span> follow <span class="token operator">and</span> self<span class="token punctuation">.</span>_follow_links<span class="token punctuation">:</span>            <span class="token keyword">for</span> request_or_item <span class="token keyword">in</span> self<span class="token punctuation">.</span>_requests_to_follow<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> request_or_item    <span class="token keyword">def</span> <span class="token function">_handle_failure</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> failure<span class="token punctuation">,</span> errback<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> errback<span class="token punctuation">:</span>            results <span class="token operator">=</span> errback<span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> request_or_item <span class="token keyword">in</span> iterate_spider_output<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> request_or_item    <span class="token keyword">def</span> <span class="token function">_compile_rules</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""制定规则"""</span>        <span class="token comment" spellcheck="true"># 生成实例变量</span>        self<span class="token punctuation">.</span>_rules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> rule <span class="token keyword">in</span> self<span class="token punctuation">.</span>rules<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 浅拷贝 rule 值</span>            self<span class="token punctuation">.</span>_rules<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_rules<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_compile<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        spider <span class="token operator">=</span> super<span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>from_crawler<span class="token punctuation">(</span>crawler<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取 settings 中 'CRAWLSPIDER_FOLLOW_LINKS' 参数 (需自定义)，若没定义则取默认值 True</span>        <span class="token comment" spellcheck="true"># 若设置 'CRAWLSPIDER_FOLLOW_LINKS' 参数为False，rules 则会失效</span>        spider<span class="token punctuation">.</span>_follow_links <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getbool<span class="token punctuation">(</span><span class="token string">'CRAWLSPIDER_FOLLOW_LINKS'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> spider</code></pre><hr></li></ul><ul><li><h4 id="Rule-类"><a href="#Rule-类" class="headerlink" title="Rule 类"></a>Rule 类</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rule</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token operator">=</span>None<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> follow<span class="token operator">=</span>None<span class="token punctuation">,</span>                 process_links<span class="token operator">=</span>None<span class="token punctuation">,</span> process_request<span class="token operator">=</span>None<span class="token punctuation">,</span> errback<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor <span class="token operator">or</span> _default_link_extractor        self<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback        self<span class="token punctuation">.</span>errback <span class="token operator">=</span> errback        self<span class="token punctuation">.</span>cb_kwargs <span class="token operator">=</span> cb_kwargs <span class="token operator">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>process_links <span class="token operator">=</span> process_links <span class="token operator">or</span> _identity        self<span class="token punctuation">.</span>process_request <span class="token operator">=</span> process_request <span class="token operator">or</span> _identity_process_request        self<span class="token punctuation">.</span>process_request_argcount <span class="token operator">=</span> None        self<span class="token punctuation">.</span>follow <span class="token operator">=</span> follow <span class="token keyword">if</span> follow <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> <span class="token operator">not</span> callback</code></pre><ul><li>link_extractor                                       一个具体的 extractor 类，用于完成 url 的抽取</li><li>callback                                               回调函数</li><li>cb_kwargs                                           传递给 link_extractor 的参数</li><li>follow                                                   满足 rule 的 url 是否进行跟踪</li><li>process_links                                       可以自定义的预处理方法   <em>参数类型 -&gt; function</em></li><li>process_request                                  对 request 进行处理           <em>参数类型 -&gt; function</em></li></ul><hr></li></ul><ul><li><h4 id="LinkExtractor-类"><a href="#LinkExtractor-类" class="headerlink" title="LinkExtractor 类"></a>LinkExtractor 类</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LxmlLinkExtractor</span><span class="token punctuation">(</span>FilteringLinkExtractor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> allow<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> restrict_xpaths<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 tags<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> canonicalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> process_value<span class="token operator">=</span>None<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>None<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 strip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> restrict_text<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags<span class="token punctuation">,</span> attrs <span class="token operator">=</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">)</span>        lx <span class="token operator">=</span> LxmlParserLinkExtractor<span class="token punctuation">(</span>            tag<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">in</span> tags<span class="token punctuation">,</span>            attr<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">in</span> attrs<span class="token punctuation">,</span>            unique<span class="token operator">=</span>unique<span class="token punctuation">,</span>            process<span class="token operator">=</span>process_value<span class="token punctuation">,</span>            strip<span class="token operator">=</span>strip<span class="token punctuation">,</span>            canonicalized<span class="token operator">=</span>canonicalize        <span class="token punctuation">)</span>        super<span class="token punctuation">(</span>LxmlLinkExtractor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>lx<span class="token punctuation">,</span> allow<span class="token operator">=</span>allow<span class="token punctuation">,</span> deny<span class="token operator">=</span>deny<span class="token punctuation">,</span>                                                allow_domains<span class="token operator">=</span>allow_domains<span class="token punctuation">,</span> deny_domains<span class="token operator">=</span>deny_domains<span class="token punctuation">,</span>                                                restrict_xpaths<span class="token operator">=</span>restrict_xpaths<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span>restrict_css<span class="token punctuation">,</span>                                                canonicalize<span class="token operator">=</span>canonicalize<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>deny_extensions<span class="token punctuation">,</span>                                                restrict_text<span class="token operator">=</span>restrict_text<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">extract_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Returns a list of :class:`~scrapy.link.Link` objects from the        specified :class:`response &lt;scrapy.http.Response>`.        Only links that match the settings passed to the ``__init__`` method of        the link extractor are returned.        Duplicate links are omitted.        """</span>        base_url <span class="token operator">=</span> get_base_url<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>restrict_xpaths<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 编译 xpath 参数</span>            docs <span class="token operator">=</span> <span class="token punctuation">[</span>subdoc                    <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>restrict_xpaths                    <span class="token keyword">for</span> subdoc <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            docs <span class="token operator">=</span> <span class="token punctuation">[</span>response<span class="token punctuation">.</span>selector<span class="token punctuation">]</span>        all_links <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> doc <span class="token keyword">in</span> docs<span class="token punctuation">:</span>            links <span class="token operator">=</span> self<span class="token punctuation">.</span>_extract_links<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>encoding<span class="token punctuation">,</span> base_url<span class="token punctuation">)</span>            all_links<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_process_links<span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> unique_list<span class="token punctuation">(</span>all_links<span class="token punctuation">)</span></code></pre><ul><li><p>allow                                                       正则提取，设定的 rules allow 参数，进行处理</p></li><li><p>deny                                                       正则提取，设定的 rules allow 参数，不处理</p></li><li><p>allow_domains                                       设定域名下的 url，进行处理</p></li><li><p>deny_domains                                        设定域名下的 url，不处理</p></li><li><p>restrict_xpaths                                        指定 xpath 规则，进行提取</p></li><li><p>tags                                                         默认提取标签 a, area  </p></li><li><p>attrs (attribute)                                        默认提取 href 属性中的值              </p></li><li><p>restrict_css                                             指定 css 规则，进行提取    <em>(最终都会被转换为 xpath 进行处理)</em></p><p>Ps：css 语法是 HTML 支持的， XML 是不支持的，最早 Xpath 是用来提取 XML 的</p></li></ul></li></ul><ul><li><h4 id="父类-FilteringLinkExtractor"><a href="#父类-FilteringLinkExtractor" class="headerlink" title="父类 FilteringLinkExtractor"></a>父类 FilteringLinkExtractor</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FilteringLinkExtractor</span><span class="token punctuation">:</span>    _csstranslator <span class="token operator">=</span> HTMLTranslator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors<span class="token punctuation">.</span>lxmlhtml <span class="token keyword">import</span> LxmlLinkExtractor        <span class="token keyword">if</span> <span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> FilteringLinkExtractor<span class="token punctuation">)</span> <span class="token operator">and</span>                <span class="token operator">not</span> issubclass<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> LxmlLinkExtractor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            warn<span class="token punctuation">(</span><span class="token string">'scrapy.linkextractors.FilteringLinkExtractor is deprecated, '</span>                 <span class="token string">'please use scrapy.linkextractors.LinkExtractor instead'</span><span class="token punctuation">,</span>                 ScrapyDeprecationWarning<span class="token punctuation">,</span> stacklevel<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span>FilteringLinkExtractor<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token punctuation">,</span> allow<span class="token punctuation">,</span> deny<span class="token punctuation">,</span> allow_domains<span class="token punctuation">,</span> deny_domains<span class="token punctuation">,</span>                 restrict_xpaths<span class="token punctuation">,</span> canonicalize<span class="token punctuation">,</span> deny_extensions<span class="token punctuation">,</span> restrict_css<span class="token punctuation">,</span> restrict_text<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor        self<span class="token punctuation">.</span>allow_res <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _re_type<span class="token punctuation">)</span> <span class="token keyword">else</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>allow<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>deny_res <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _re_type<span class="token punctuation">)</span> <span class="token keyword">else</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                         <span class="token keyword">for</span> x <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>deny<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>allow_domains <span class="token operator">=</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>allow_domains<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>deny_domains <span class="token operator">=</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>deny_domains<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>restrict_xpaths <span class="token operator">=</span> tuple<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>restrict_xpaths<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>restrict_xpaths <span class="token operator">+=</span> tuple<span class="token punctuation">(</span>map<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_csstranslator<span class="token punctuation">.</span>css_to_xpath<span class="token punctuation">,</span>                                          arg_to_iter<span class="token punctuation">(</span>restrict_css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>canonicalize <span class="token operator">=</span> canonicalize        <span class="token keyword">if</span> deny_extensions <span class="token keyword">is</span> None<span class="token punctuation">:</span>            deny_extensions <span class="token operator">=</span> IGNORED_EXTENSIONS        self<span class="token punctuation">.</span>deny_extensions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'.'</span> <span class="token operator">+</span> e <span class="token keyword">for</span> e <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>deny_extensions<span class="token punctuation">)</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>restrict_text <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _re_type<span class="token punctuation">)</span> <span class="token keyword">else</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                              <span class="token keyword">for</span> x <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>restrict_text<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">_link_allowed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> _is_valid_url<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_res <span class="token operator">and</span> <span class="token operator">not</span> _matches<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>allow_res<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_res <span class="token operator">and</span> _matches<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_res<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        parsed_url <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_domains <span class="token operator">and</span> <span class="token operator">not</span> url_is_from_any_domain<span class="token punctuation">(</span>parsed_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>allow_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_domains <span class="token operator">and</span> url_is_from_any_domain<span class="token punctuation">(</span>parsed_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_extensions <span class="token operator">and</span> url_has_any_extension<span class="token punctuation">(</span>parsed_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_extensions<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>restrict_text <span class="token operator">and</span> <span class="token operator">not</span> _matches<span class="token punctuation">(</span>link<span class="token punctuation">.</span>text<span class="token punctuation">,</span> self<span class="token punctuation">.</span>restrict_text<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">matches</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_domains <span class="token operator">and</span> <span class="token operator">not</span> url_is_from_any_domain<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>allow_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_domains <span class="token operator">and</span> url_is_from_any_domain<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        allowed <span class="token operator">=</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> regex <span class="token keyword">in</span> self<span class="token punctuation">.</span>allow_res<span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_res <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span>        denied <span class="token operator">=</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> regex <span class="token keyword">in</span> self<span class="token punctuation">.</span>deny_res<span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_res <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> any<span class="token punctuation">(</span>allowed<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> any<span class="token punctuation">(</span>denied<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_process_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> links<span class="token punctuation">)</span><span class="token punctuation">:</span>        links <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> links <span class="token keyword">if</span> self<span class="token punctuation">.</span>_link_allowed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>canonicalize<span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                link<span class="token punctuation">.</span>url <span class="token operator">=</span> canonicalize_url<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        links <span class="token operator">=</span> self<span class="token punctuation">.</span>link_extractor<span class="token punctuation">.</span>_process_links<span class="token punctuation">(</span>links<span class="token punctuation">)</span>        <span class="token keyword">return</span> links    <span class="token keyword">def</span> <span class="token function">_extract_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>link_extractor<span class="token punctuation">.</span>_extract_links<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Top-level imports</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors<span class="token punctuation">.</span>lxmlhtml <span class="token keyword">import</span> LxmlLinkExtractor <span class="token keyword">as</span> LinkExtractor  </code></pre></li></ul><ul><li><h4 id="引用-HTMLTranslator-类"><a href="#引用-HTMLTranslator-类" class="headerlink" title="引用 HTMLTranslator 类"></a>引用 HTMLTranslator 类</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HTMLTranslator</span><span class="token punctuation">(</span>TranslatorMixin<span class="token punctuation">,</span> OriginalHTMLTranslator<span class="token punctuation">)</span><span class="token punctuation">:</span>    @lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">css_to_xpath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> css<span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">'descendant-or-self::'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span>HTMLTranslator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>css_to_xpath<span class="token punctuation">(</span>css<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span></code></pre><ul><li>css 转换 xpath</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础语法</title>
      <link href="/2020/06/28/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/06/28/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="查看库，表，内容"><a href="#查看库，表，内容" class="headerlink" title="查看库，表，内容"></a>查看库，表，内容</h4><ul><li><p>查看MySQL版本号 </p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>V  <span class="token operator">or</span> mysql <span class="token comment" spellcheck="true">--version</span></code></pre></li><li><p>查看当前所有库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre></li><li><p>进入数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> db_name<span class="token punctuation">;</span></code></pre></li><li><p>查看当前所有表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token keyword">from</span> db_name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 查看指定库的表</span></code></pre></li><li><p>查看表内容</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>创建表，以及字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span>Id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 字段|类型</span>Name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true"># 字段|类型</span></code></pre></li><li><p>查看所在库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查看表结构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DESC</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> “mack”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> name<span class="token operator">=</span>”jack” <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>删除表数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li></ul><hr><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><ul><li><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> field <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre><blockquote><p>特点：查询列表可以是：表中的字段，常量值，表达式，函数</p></blockquote></li><li><p>查询表中的单个字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> field1 <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>查询表中多个字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> field1<span class="token punctuation">,</span> field2 <span class="token keyword">from</span> table_name<span class="token punctuation">;</span> </code></pre></li><li><p>查询表中所有字段 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>区分关键字与字段</p><blockquote><p>字段名前后加入 ` 符号</p></blockquote></li><li><p>查询常量值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> ‘<span class="token keyword">join</span>’<span class="token punctuation">;</span></code></pre></li><li><p>查询表达式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span></code></pre></li><li><p>查询函</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 调用version函数返回版本号</code></pre></li></ul><ul><li><p>赋予别名，改变字段名称</p><ol><li><p>利于理解</p></li><li><p>如果查询的字段存在重名，使用别名可以进行区分<br>方法一</p><pre><code>Select version() as one;</code></pre></li></ol></li></ul><pre><code> 方法二 ``` select version() one; select version() “one pic”; ```</code></pre><ul><li><p>+号的作用</p><ol><li><p>加法运算</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> ‘<span class="token keyword">join</span>’ <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>  输出结果：<span class="token number">100</span></code></pre></li></ol></li></ul><ol start="2"><li><p>其中一方为字符串，则转换类型，转换失败则置0处理</p></li><li><p>若一方为Null，则结果为Null</p></li></ol><ul><li><p><strong>DISTINCT</strong>-去重</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> DICTINCT 字段名 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p><strong>CONCAT</strong>-连接查询字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>field1<span class="token punctuation">,</span> ‘<span class="token punctuation">,</span>’ field2<span class="token punctuation">)</span> <span class="token keyword">as</span> 列名 <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p><strong>IFNULL</strong>-判空函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre><blockquote><p>第一个参数为Null，则替换为第二个参数</p></blockquote></li></ul><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><blockquote><p>Select 查询字段 from 表名 where 筛选条件;</p></blockquote></li><li><h6 id="按条件表达式筛选"><a href="#按条件表达式筛选" class="headerlink" title="按条件表达式筛选"></a>按条件表达式筛选</h6><p><strong>条件运算符：&gt; &lt; &gt;= &lt;= != &lt;&gt; =</strong></p><ul><li><p>案例1：查询工资&gt;12000的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name W salary <span class="token operator">></span> <span class="token number">12000</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li><p>案例2：查询部分编号!=90的员工名和部门编号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> department_id<span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department <span class="token operator">&lt;></span> <span class="token number">90</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><h6 id="按逻辑表达式筛选"><a href="#按逻辑表达式筛选" class="headerlink" title="按逻辑表达式筛选"></a>按逻辑表达式筛选</h6><p><strong>逻辑运算符：And or not</strong></p><ul><li><p>案例1：查询工资在10000到20000之间的员工名，工资，奖金信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> commission_pct<span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token number">10000</span> <span class="token operator">AND</span> salary <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li><p>案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">></span> <span class="token number">110</span> <span class="token operator">OR</span> department_id <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token operator">OR</span> salary <span class="token operator">></span> <span class="token number">15000</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为 &gt;110 与 &lt;90条件不冲突，以及salary字段&gt;15000最后才执行</p></blockquote></li></ul><ul><li><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p><strong>关键字：like，between and，in，is null</strong></p><p><em>like：一般和通配符配合使用</em></p><ul><li><p>案例1：查询员工名中包含字符a的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">From</span> employees<span class="token keyword">Where</span> last_name <span class="token operator">like</span> ‘<span class="token operator">%</span><span class="token number">a</span><span class="token operator">%</span>’<span class="token punctuation">;</span></code></pre><blockquote><p>字符串必须使用单引号，%代表通配符，任意字符，包含0个字符</p></blockquote></li></ul></li></ul><hr><hr><h4 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h4><h6 id="Mysql报错1366"><a href="#Mysql报错1366" class="headerlink" title="Mysql报错1366"></a>Mysql报错1366</h6><ul><li>解决方案：修改此表的字符集</li><li>分别操作：查看表中每个字段的字符集，修改表中的字段的字符集</li><li>查看表结构：show full columns from 表名;</li><li>改变表结构：alter table 表名 convert to character set utf8;</li></ul><h6 id="创建用户和授权"><a href="#创建用户和授权" class="headerlink" title="创建用户和授权"></a>创建用户和授权</h6><p>在mysql8.0创建用户和授权和之前不太一样了，其实严格上来讲，也不能说是不一样,只能说是更严格,mysql8.0需要先创建用户和设置密码,然后才能授权.</p><ol><li><p>先创建一个用户</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'tone'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123123</span>'<span class="token punctuation">;</span></code></pre></li><li><p>进行授权</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'tone'</span><span class="token variable">@'%'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span></code></pre></li><li><p>如果还是用原来5.7的那种方式，会报错误：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'tome'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123123</span>'<span class="token punctuation">;</span></code></pre><p>抛出错误：</p><pre><code>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds toyour MySQL server version for the right syntax to use near &#39;identified by &#39;123123&#39;&#39; at line 1</code></pre></li></ol><h6 id="MySQL8-0-的远程链接"><a href="#MySQL8-0-的远程链接" class="headerlink" title="MySQL8.0 的远程链接"></a>MySQL8.0 的远程链接</h6><p>MySQL 安装完成后只支持 localhost 访问，我们必须设置一下才可以远程访问，另外还有一些 MySQL 8.0 连接时的一些问题.</p><ul><li><p>登录MySQL</p><pre class=" language-mysql"><code class="language-mysql">mysql -u root -p</code></pre></li></ul><ul><li><p>输入您的密码，选择 mysql 数据库</p><pre class=" language-mysql"><code class="language-mysql">use mysql;</code></pre></li></ul><ul><li><p>因为 mysql 数据库中存储了用户信息的 user 表，在 mysql 数据库的 user 表中查看当前 root 用户的相关信息</p><pre class=" language-mysql"><code class="language-mysql">select host, user, authentication_string, plugin from user; </code></pre></li></ul><ul><li><p>执行完上面的命令后会显示一个表格，<br>查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。<br>授权 root 用户的所有权限并设置远程访问</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>GRANT ALL ON 表示所有权限，% 表示通配所有 host，可以访问远程。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>你自己的密码'<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>刷新权限所有操作后，应执行</p><pre class=" language-mysql"><code class="language-mysql">flush privileges;</code></pre></li></ul><ul><li><p>查看 root 用户的 host</p><pre class=" language-mysql"><code class="language-mysql">use mysql;select host, user, authentication_string, plugin from user;</code></pre></li></ul><ul><li><p>发现 root 用户的 host 已经变成 %，说明我们的修改已经成功，可以远程访问了。</p></li><li><p>访问数据库</p><blockquote><p>远程访问数据库的GUI工具比较多如：Navicat、SQLyog、MySQL workbench 等，我这里使用 Navicat</p></blockquote></li><li><p>输入访问的 host 和密码，报 2059 错误，这是因为 MySql8.0 版本 和 5.7 的加密规则不一样，而现在的可视化工具只支持旧的加密方式。</p></li></ul><blockquote><p>出现这个原因是mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password.<br>解决问题方法有两种,一种是升级navicat驱动,一种是把mysql用户登录密码加密规则还原成mysql_native_password.</p></blockquote><p>​        这里采用第二种方式 ：</p><p>​        修改加密规则:</p><pre class=" language-mysql"><code class="language-mysql">ALTER USER 'root'@'%' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; password 为你当前密码。</code></pre><p>​        更新 root 用户密码:</p><pre class=" language-mysql"><code class="language-mysql">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; password 为你新设置的密码。</code></pre><p>​        刷新权限:</p><pre class=" language-mysql"><code class="language-mysql">FLUSH PRIVILEGES; </code></pre><p>​        OK，设置完成，再次使用 Navicat 连接数据库</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
