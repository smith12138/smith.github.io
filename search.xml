<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python正则表达式</title>
      <link href="/2020/07/12/Python/basic/re/"/>
      <url>/2020/07/12/Python/basic/re/</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li><h4 id="爬虫的基础掌握"><a href="#爬虫的基础掌握" class="headerlink" title="爬虫的基础掌握"></a>爬虫的基础掌握</h4><ul><li><h5 id="是一个特殊的字符序列"><a href="#是一个特殊的字符序列" class="headerlink" title="是一个特殊的字符序列"></a>是一个特殊的字符序列</h5><blockquote><p><em>检测一个字符串是否与我们设定的字符序列，相匹配</em></p><p><em>若匹配，则可以快速检索，替换文本的操作</em></p><h6 id="场景示例1："><a href="#场景示例1：" class="headerlink" title="场景示例1："></a>场景示例1：</h6><p><em>检测一串数字是否是电话号码</em></p><h6 id="场景示例2："><a href="#场景示例2：" class="headerlink" title="场景示例2："></a>场景示例2：</h6><p><em>检测一串字符串是否符合  Email</em></p><p><em>把一个文本中指定单词，替换成另一个单词</em></p></blockquote></li></ul></li></ul><ul><li><h5 id="爬虫爬取html网页-找到标签，爬取标签中间的内容"><a href="#爬虫爬取html网页-找到标签，爬取标签中间的内容" class="headerlink" title="爬虫爬取html网页 找到标签，爬取标签中间的内容"></a>爬虫爬取html网页 找到标签，爬取标签中间的内容</h5></li><li><h5 id="正则表达式，主要应用在爬虫，应用数据处理与分析上"><a href="#正则表达式，主要应用在爬虫，应用数据处理与分析上" class="headerlink" title="正则表达式，主要应用在爬虫，应用数据处理与分析上"></a>正则表达式，主要应用在爬虫，应用数据处理与分析上</h5></li><li><h5 id="常用正则表达式，可使用已经完善的，可搜索到的直接使用"><a href="#常用正则表达式，可使用已经完善的，可搜索到的直接使用" class="headerlink" title="常用正则表达式，可使用已经完善的，可搜索到的直接使用"></a>常用正则表达式，可使用已经完善的，可搜索到的直接使用</h5></li><li><h5 id="容易遗忘正则表达式，经常使用正则表达式"><a href="#容易遗忘正则表达式，经常使用正则表达式" class="headerlink" title="容易遗忘正则表达式，经常使用正则表达式"></a>容易遗忘正则表达式，经常使用正则表达式</h5></li></ul><hr><ul><li><h4 id="Python-内置函数-index"><a href="#Python-内置函数-index" class="headerlink" title="Python 内置函数 index"></a>Python 内置函数 index</h4><h6 id="语法示例："><a href="#语法示例：" class="headerlink" title="语法示例："></a>语法示例：</h6><pre class=" language-python"><code class="language-python">A <span class="token operator">=</span> <span class="token string">'C|C++|C#|Python|Java|Javascript'</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token boolean">True</span>  <span class="token operator">/</span>表示 常量A中包含str Python使用成员运算符：<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python'</span> <span class="token keyword">in</span> A<span class="token punctuation">)</span><span class="token boolean">True</span>  <span class="token operator">/</span>表示 常量A中包含str Python</code></pre></li></ul><ul><li><h4 id="引入Python内置模块-re"><a href="#引入Python内置模块-re" class="headerlink" title="引入Python内置模块 re"></a>引入Python内置模块 re</h4><ul><li><h5 id="re-中有很多方法可操作正则表达式"><a href="#re-中有很多方法可操作正则表达式" class="headerlink" title="re 中有很多方法可操作正则表达式"></a>re 中有很多方法可操作正则表达式</h5><blockquote><h6 id="语法示例：-1"><a href="#语法示例：-1" class="headerlink" title="语法示例："></a>语法示例：</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment" spellcheck="true">#导入内置模块</span>A <span class="token operator">=</span> <span class="token string">'C|C++|C#|Python|Java|Javascript'</span><span class="token comment" spellcheck="true">#把字符串赋值给常量A</span>B <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#常量B,接收表达式结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回 ['Python']</span></code></pre><h6 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment" spellcheck="true">#导入内置模块</span>A <span class="token operator">=</span> <span class="token string">'C|C++|C#|Python|Java|Javascript'</span><span class="token comment" spellcheck="true">#把字符串赋值给常量A</span>B <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'PHP'</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#常量B,接收表达式结果</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串中包含Python'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串中无查询选项'</span><span class="token punctuation">)</span></code></pre></blockquote></li></ul></li></ul><hr><ul><li><h4 id="正则表达式在于-规则-，而不是表达普通的常量字符串"><a href="#正则表达式在于-规则-，而不是表达普通的常量字符串" class="headerlink" title="正则表达式在于 规则 ，而不是表达普通的常量字符串"></a>正则表达式在于 规则 ，而不是表达普通的常量字符串</h4></li><li><h4 id="组成元素"><a href="#组成元素" class="headerlink" title="组成元素"></a>组成元素</h4><ul><li><h5 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h5><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> 常量<span class="token punctuation">)</span><span class="token string">'Python'</span>中的字符，为普通字符</code></pre></li><li><h5 id="元字符-（字符集，概括字符集，数量词"><a href="#元字符-（字符集，概括字符集，数量词" class="headerlink" title="元字符 （字符集，概括字符集，数量词)"></a>元字符 （字符集，概括字符集，数量词)</h5><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span> 常量<span class="token punctuation">)</span><span class="token string">'\d'</span>中的字符，为元字符正则表达式，就是由一系列普通字符，元字符所组成的且普通字符和元字符，可混合使用</code></pre></li></ul></li></ul><hr><ul><li><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符集</span><span class="token keyword">import</span> re</code></pre></li></ul><p>  s = ‘abc, acc, adc, aec, afc, ahc’</p><p>  z = re.findall(‘a[^cf]c’, s)</p><h1 id="a-和-c-作为普通字符-用作定界-cf-作为元字符进行抽象检索-匹配c-or-f-或关系，-cf-非c，非f-取反的操作"><a href="#a-和-c-作为普通字符-用作定界-cf-作为元字符进行抽象检索-匹配c-or-f-或关系，-cf-非c，非f-取反的操作" class="headerlink" title="a 和 c 作为普通字符 用作定界  [cf]作为元字符进行抽象检索 匹配c or f 或关系，[^cf] 非c，非f 取反的操作"></a>a 和 c 作为普通字符 用作定界  [cf]作为元字符进行抽象检索 匹配c or f 或关系，[^cf] 非c，非f 取反的操作</h1><h1 id="a-f-按顺序匹配，彼此为或关系，缩短代码长度"><a href="#a-f-按顺序匹配，彼此为或关系，缩短代码长度" class="headerlink" title="[a-f] 按顺序匹配，彼此为或关系，缩短代码长度"></a>[a-f] 按顺序匹配，彼此为或关系，缩短代码长度</h1><p>  print(z)</p><p>  ```</p><ul><li><h4 id="概括字符集"><a href="#概括字符集" class="headerlink" title="概括字符集"></a>概括字符集</h4><ul><li><h5 id="不管是字符集-概括字符集，都是匹配一个字符"><a href="#不管是字符集-概括字符集，都是匹配一个字符" class="headerlink" title="不管是字符集/概括字符集，都是匹配一个字符"></a>不管是字符集/概括字符集，都是匹配一个字符</h5><table><thead><tr><th>Command</th><th>Describe</th></tr></thead><tbody><tr><td>[] 中括号</td><td>括号中的字符为或关系</td></tr><tr><td>\d</td><td>匹配0-9阿拉伯数字</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\w</td><td>匹配单词字符(数字以及字母，下划线) [A-Z a-z 0-9 _]</td></tr><tr><td>\W</td><td>匹配非单词字符  (&amp;,*,\n, \r)</td></tr><tr><td>\s</td><td>匹配空白字 符(\n , \r, \t,  )</td></tr><tr><td>\S</td><td>匹配非空白字符</td></tr><tr><td>.</td><td>匹配除换行符外的所有字符</td></tr><tr><td>|</td><td>或关系 “1|2” 一或二</td></tr><tr><td>[.*]</td><td>中括号中.  * 即为普通字符元素</td></tr><tr><td>[^\d]</td><td>中括号中 为非关系</td></tr><tr><td>\u4E00-\u9FA5</td><td>匹配中文</td></tr></tbody></table></li></ul></li></ul><ul><li><h4 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h4><p><code>贪婪与非贪婪使用不当 ，易导致程序bug</code></p><ul><li><h6 id="贪婪"><a href="#贪婪" class="headerlink" title="贪婪"></a>贪婪</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数量词</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'Python 1111Java678php'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[A-Za-z]{3,6}'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 匹配大小写字母，单词数量区间为3 - 6个字符 </span><span class="token comment" spellcheck="true"># 为什么匹配时，没在 'Pyt' 处截断 , 一直匹配至 Python</span><span class="token comment" spellcheck="true"># 默认匹配方式为，贪婪 优先取设定区间最大的数量 当匹配至，不在符和条件时停下 ->跳过 ->寻找下个目标字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Python', 'Java', 'php']</span></code></pre></li></ul></li></ul><ul><li><h6 id="非贪婪-加入字符"><a href="#非贪婪-加入字符" class="headerlink" title="非贪婪  加入字符 ?"></a>非贪婪  加入字符 ?</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'Python 1111Java678php'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[A-Za-z]{3,6}?'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 匹配大小写字母，单词数量区间为3 - 6个字符 </span>非贪婪 <span class="token comment" spellcheck="true"># 优先取设定区间最小数量，当匹配至，不在符和条件时停下 ->跳过 ->寻找下个目标字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Pyt', 'hon', 'Jav', 'php']</span></code></pre></li></ul><ul><li><h6 id="匹配-0次-或-无限多次（去重等功能）"><a href="#匹配-0次-或-无限多次（去重等功能）" class="headerlink" title="匹配 0次 或 无限多次（去重等功能）"></a>匹配 0次 或 无限多次（去重等功能）</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'pytho0python1pythonn2'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'python*'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 匹配0次或无限多次 pytho中的 n </span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['pytho', 'python', 'pythonn']</span></code></pre></li></ul><ul><li><h6 id="匹配1次-或-无限多次"><a href="#匹配1次-或-无限多次" class="headerlink" title="匹配1次 或 无限多次"></a>匹配1次 或 无限多次</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'pytho0python1pythonn2'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'python+'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 匹配1次或无限多次 pytho中的 + </span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['python', 'pythonn']</span></code></pre></li></ul><ul><li><h6 id="匹配0次-或-1次"><a href="#匹配0次-或-1次" class="headerlink" title="? 匹配0次 或 1次"></a>? 匹配0次 或 1次</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'pytho0python1pythonn2'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'python?'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 匹配0次或 1次 pytho中的 ?</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['pytho', 'python', 'python']</span></code></pre></li></ul><ul><li><p>边界匹配 ^ $</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 边界匹配 </span><span class="token comment" spellcheck="true"># ^ 从字符串前面 开始匹配  仅匹配一次 结果为：有 或 空</span><span class="token comment" spellcheck="true"># $ 从字符串后面 开始匹配  仅匹配一次 结果为：有 或 空  看为一个占位符</span><span class="token comment" spellcheck="true"># ^ $ 匹配完整字符串 位数</span></code></pre></li></ul><pre><code>import reqq = &#39;000000001&#39;# 需求：账号为4~8位之间b = re.findall(&#39;^\d{4,9}$&#39;, qq)# 正则匹配：贪婪 print(b)# [&#39;000000001&#39;] 从前到后，整组字符串 进行 区间 贪婪匹配c = re.findall(&#39;00{2,3}$&#39;, qq)print(c)# []d = re.findall(&#39;^00{2,3}&#39;, qq)print(d)# [&#39;0000&#39;] 仅匹配一次 0 and 匹配条件 0 {2,3}区间，默认贪婪 0 +000e = re.findall(&#39;^100$&#39;, qq)print(e)# []```</code></pre><hr><ul><li><h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><ul><li><h6 id="圆括号中的字符为-且关系"><a href="#圆括号中的字符为-且关系" class="headerlink" title="() 圆括号中的字符为 且关系"></a>() 圆括号中的字符为 且关系</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 组 使用()中的字符</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'PythonPythonPythonPythonPython'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'(Python){6}'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h4 id="模式参数-，findall函数的第三个参数"><a href="#模式参数-，findall函数的第三个参数" class="headerlink" title="模式参数 ，findall函数的第三个参数"></a>模式参数 ，findall函数的第三个参数</h4><ul><li><h6 id="re-I-无视字符大小写"><a href="#re-I-无视字符大小写" class="headerlink" title="re.I 无视字符大小写"></a>re.I 无视字符大小写</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#模式参数</span><span class="token keyword">import</span> relanuage <span class="token operator">=</span> <span class="token string">'PythonC#PHPJava'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'c#'</span><span class="token punctuation">,</span> lanuage<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['C#']</span></code></pre></li></ul></li></ul><ul><li><h6 id="可接受多个模式，之间需要-连接在一起"><a href="#可接受多个模式，之间需要-连接在一起" class="headerlink" title="可接受多个模式，之间需要 | 连接在一起"></a>可接受多个模式，之间需要 | 连接在一起</h6></li></ul><ul><li><h6 id="re-S匹配所有字符包括换行符"><a href="#re-S匹配所有字符包括换行符" class="headerlink" title="re.S匹配所有字符包括换行符"></a>re.S匹配所有字符包括换行符</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#模式参数</span><span class="token keyword">import</span> relanuage <span class="token operator">=</span> <span class="token string">'PythonC#\nPHPJava'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'c#.{1}'</span><span class="token punctuation">,</span> lanuage<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I <span class="token operator">|</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#匹配c# + 一个任意字符 除\n换行符 re.I 与 re.S 为且关系 </span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['C#']</span></code></pre></li></ul><ul><li><h4 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h4><ul><li><h6 id="使用re模块中的re-sub"><a href="#使用re模块中的re-sub" class="headerlink" title="使用re模块中的re.sub"></a>使用re模块中的re.sub</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#正则替换</span><span class="token keyword">import</span> relanuage <span class="token operator">=</span> <span class="token string">'PythonC#JavaPHPPython，Python'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'(Python)'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> lanuage<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把组中字符，替换为python，紧接着为字符串，count参数 默认为0 = 无限替换  </span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h6 id="使用Python内置函数-replace"><a href="#使用Python内置函数-replace" class="headerlink" title="使用Python内置函数 replace"></a>使用Python内置函数 replace</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#正则替换</span><span class="token keyword">import</span> relanuage <span class="token operator">=</span> <span class="token string">'PythonC#JavaPHPPython，Python'</span> lanuage <span class="token operator">=</span> lanuage<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内置函数 replace 替换字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li></ul><ul><li><h6 id="传入函数进行替换"><a href="#传入函数进行替换" class="headerlink" title="传入函数进行替换"></a>传入函数进行替换</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#正则替换</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'22'</span>lanuage <span class="token operator">=</span> <span class="token string">'PythonC#JavaPHPPython，Python'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> convert<span class="token punctuation">,</span> lanuage<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 正则匹配，若有结果，则传入convert函数中，函数返回的值将进行替换</span>Print<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>调用函数传递参数  </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#调用 （目的是把业务交给函数去处理）</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> convert 函数被调用两次 每次传入的value 为一个对象</code></pre></li></ul><pre><code>&lt;re.Match object; span=(0, 6), match=&#39;Python&#39;&gt;  序号 = 前面0位 至 截止六位 &lt;re.Match object; span=(15, 21), match=&#39;Python&#39;&gt;# return &#39;2&#39; + value + &#39;2&#39;lanuage = &#39;PythonC#JavaPHPPython，Python&#39;b = re.sub(&#39;Python&#39;, convert, lanuage, 2)```</code></pre><ul><li><p>接收对象，并进行判断操作（重要）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 接收 使用group方法转换的字符串</span>  matched <span class="token operator">=</span> value<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>  a <span class="token operator">=</span> <span class="token string">'Python'</span>  <span class="token comment" spellcheck="true"># 判断字符串，进行条件转换</span>  <span class="token keyword">if</span> matched <span class="token operator">==</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>    matched <span class="token operator">=</span> <span class="token string">'C++'</span>  <span class="token keyword">elif</span> matched <span class="token operator">==</span> <span class="token string">'C#'</span><span class="token punctuation">:</span>    matched <span class="token operator">=</span> <span class="token string">'TypeScript'</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token keyword">return</span> <span class="token string">'已处理'</span> <span class="token operator">+</span> matchedlanuage <span class="token operator">=</span> <span class="token string">'PythonC#JavaPHPPython，Python'</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'Py'</span><span class="token punctuation">,</span> convert<span class="token punctuation">,</span> lanuage<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><strong><em>Python函数 / 方法中可接受 函数 （不只是str，float，int等类型）</em></strong></p></li></ul><hr><ul><li><h4 id="re模块中的函数"><a href="#re模块中的函数" class="headerlink" title="re模块中的函数"></a>re模块中的函数</h4><ul><li><h6 id="Findall"><a href="#Findall" class="headerlink" title="Findall"></a>Findall</h6><blockquote><p>传入正则表达式，字符串，模式参数</p><p>返回list类型中加入字符串</p></blockquote></li></ul></li></ul><ul><li><h6 id="Sub"><a href="#Sub" class="headerlink" title="Sub"></a>Sub</h6><blockquote><p>传入正则表达式，替换参数，原字符串，替换次数，模式参数</p></blockquote></li></ul><ul><li><h6 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h6><blockquote><p>传入正则表达式，字符串，模式参数</p><p>从字符串的第一位开始匹配，若没有则返回None</p><p>仅匹配一次</p></blockquote></li></ul><ul><li><h6 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h6><blockquote><p>传入正则表达式，字符串，模式参数</p><p>从字符串前面往后一直匹配，成功后，立马返回结果</p><p>仅匹配一次</p></blockquote></li></ul><ul><li><h6 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h6><blockquote><p>转换object类型，为字符串</p><p>分组</p><p>可传入参数 = 组号</p></blockquote></li></ul><ul><li><h6 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'life is short,i use Python'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">' (.*) '</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上述正则表达式未一个分组， 虽然未加入()，因为只有一个分组</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 传入组号，默认为0 记录的是：正则表达式的完整匹配结果</span><span class="token comment" spellcheck="true"># 想要访问完整匹配结果，下面的分组 需填入>=1</span></code></pre></li></ul><pre><code>可连续传入多个组号print(r.group(1, 2, 3))(&#39;life is short,i use Python, i love Python&#39;, &#39; is short,i use &#39;, &#39;, i love &#39;) 查询结果以tuple类型返回```</code></pre><ul><li><h6 id="Groups-不需要传入组号参数"><a href="#Groups-不需要传入组号参数" class="headerlink" title="Groups 不需要传入组号参数"></a>Groups 不需要传入组号参数</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 返回已定义分组，不会饭后整个字符串</code></pre></li><li><h6 id="Span"><a href="#Span" class="headerlink" title="Span"></a>Span</h6><p><em>返回object类型的位置</em></p></li></ul><hr><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON与XML区别</title>
      <link href="/2020/07/12/Python/basic/json-xml/"/>
      <url>/2020/07/12/Python/basic/json-xml/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h3><p><em>JavaScript Object Notation   译为  JavaScript 对象标记</em></p><p><em>本质概述：是一种轻量级的数据交换格式</em></p><p><em>再次强调 JSON是 一种数据交换格式</em></p><p><em>字符串是JSON的表现形式/载体</em></p><h3 id="JSON对象-与-JSON字符串的区别"><a href="#JSON对象-与-JSON字符串的区别" class="headerlink" title="JSON对象 与 JSON字符串的区别"></a>JSON对象 与 JSON字符串的区别</h3><ul><li><h4 id="符合JSON格式的字符串叫做JSON字符串"><a href="#符合JSON格式的字符串叫做JSON字符串" class="headerlink" title="符合JSON格式的字符串叫做JSON字符串"></a>符合JSON格式的字符串叫做JSON字符串</h4><ul><li><h5 id="错误JSON格式"><a href="#错误JSON格式" class="headerlink" title="错误JSON格式"></a>错误JSON格式</h5><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">"Python"</span></code></pre></li></ul></li></ul><ul><li><h5 id="正确JSON格式"><a href="#正确JSON格式" class="headerlink" title="正确JSON格式"></a>正确JSON格式</h5><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">"Python"</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="JSON和每种语言下特定的数据结构，进行数据交换，转换"><a href="#JSON和每种语言下特定的数据结构，进行数据交换，转换" class="headerlink" title="JSON和每种语言下特定的数据结构，进行数据交换，转换"></a>JSON和每种语言下特定的数据结构，进行数据交换，转换</h5></li></ul><h3 id="JSON对象，-JSON，-JSON字符串-之间的区别"><a href="#JSON对象，-JSON，-JSON字符串-之间的区别" class="headerlink" title="JSON对象， JSON，  JSON字符串  之间的区别"></a>JSON对象， JSON，  JSON字符串  之间的区别</h3><blockquote><ul><li><h6 id="绝大多数的答案，都站在JavaScript语言的角度，阐述区别"><a href="#绝大多数的答案，都站在JavaScript语言的角度，阐述区别" class="headerlink" title="绝大多数的答案，都站在JavaScript语言的角度，阐述区别"></a>绝大多数的答案，都站在JavaScript语言的角度，阐述区别</h6></li><li><h6 id="JSON是REST服务的标准格式"><a href="#JSON是REST服务的标准格式" class="headerlink" title="JSON是REST服务的标准格式"></a>JSON是REST服务的标准格式</h6></li><li><h6 id="JSON的制定并不是专门为JavaScript设计的"><a href="#JSON的制定并不是专门为JavaScript设计的" class="headerlink" title="JSON的制定并不是专门为JavaScript设计的"></a>JSON的制定并不是专门为JavaScript设计的</h6></li><li><h6 id="它只是一种传输数据的一种格式"><a href="#它只是一种传输数据的一种格式" class="headerlink" title="它只是一种传输数据的一种格式"></a>它只是一种传输数据的一种格式</h6></li><li><h6 id="JavaScript与JSON的数据交换里面，和Python，C-没有区别"><a href="#JavaScript与JSON的数据交换里面，和Python，C-没有区别" class="headerlink" title="JavaScript与JSON的数据交换里面，和Python，C#没有区别"></a>JavaScript与JSON的数据交换里面，和Python，C#没有区别</h6></li><li><h6 id="JSON的数据类型与JavaScript过于相似"><a href="#JSON的数据类型与JavaScript过于相似" class="headerlink" title="JSON的数据类型与JavaScript过于相似"></a>JSON的数据类型与JavaScript过于相似</h6></li><li><h6 id="JSON有自己的数据类型，仅和JavaScript相似"><a href="#JSON有自己的数据类型，仅和JavaScript相似" class="headerlink" title="JSON有自己的数据类型，仅和JavaScript相似"></a>JSON有自己的数据类型，仅和JavaScript相似</h6></li><li><h6 id="JavaScript只是一个实现标准方案之一"><a href="#JavaScript只是一个实现标准方案之一" class="headerlink" title="JavaScript只是一个实现标准方案之一"></a>JavaScript只是一个实现标准方案之一</h6></li><li><h6 id="标准为：ECMASCRIPT-gt-ActionScript-gt-JSON的一个版本"><a href="#标准为：ECMASCRIPT-gt-ActionScript-gt-JSON的一个版本" class="headerlink" title="标准为：ECMASCRIPT -&gt; ActionScript -&gt; JSON的一个版本"></a>标准为：ECMASCRIPT -&gt; ActionScript -&gt; JSON的一个版本</h6></li><li><h6 id="某种程度JSON和JavaScript是一种平级的语言"><a href="#某种程度JSON和JavaScript是一种平级的语言" class="headerlink" title="某种程度JSON和JavaScript是一种平级的语言"></a>某种程度JSON和JavaScript是一种平级的语言</h6></li><li><h6 id="误区（JSON与JavaScript，没有直接关系）"><a href="#误区（JSON与JavaScript，没有直接关系）" class="headerlink" title="误区（JSON与JavaScript，没有直接关系）"></a>误区（JSON与JavaScript，没有直接关系）</h6><p><em>JSON与JavaScript都是对ECMASCRIPT这个W3C（团队）它所制定的脚本的规范和标准实现</em></p><p><em>JSON在最开始在前后端的分离起到了重要的作用，而服务器的语言种类繁多，前端最主流的就是JavaScript，因为JSON被大量的应用在JavaScript的交互中</em></p><p><em>还有一个微软的TypeScript只是JavaScript的超集</em></p></li><li><h6 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h6><p><em>(1) 定义非常片面（在JavaScript中是存在的）</em></p><p><em>(2) 放到 Python中的话，是没有这个JSON对象的</em></p></li></ul><p>  <img src="https://i.loli.net/2020/05/14/lKF2evBjd6oEb9p.jpg" alt=""> </p></blockquote><h3 id="轻量级的数据格式"><a href="#轻量级的数据格式" class="headerlink" title="轻量级的数据格式"></a>轻量级的数据格式</h3><ul><li><h4 id="外部数据交换的主流格式"><a href="#外部数据交换的主流格式" class="headerlink" title="外部数据交换的主流格式"></a>外部数据交换的主流格式</h4><ul><li><h5 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h5><blockquote><p><em>使用较少，特殊情况例外</em></p><p><em>在JSON出现之前，为主流交换格式</em></p><p><em>在特定的领域，注重数据结构的领域会使用</em></p><p><em>阅读稍显复杂</em></p><p><em>跨语言交换数据</em></p></blockquote></li></ul></li></ul><ul><li><h5 id="JSON的优势"><a href="#JSON的优势" class="headerlink" title="JSON的优势"></a>JSON的优势</h5><blockquote><p><em>易于阅读</em></p><p><em>易于解析</em></p></blockquote></li></ul><ul><li><h5 id="JSON作为数据交互的格式，存在组装和被解析的过程"><a href="#JSON作为数据交互的格式，存在组装和被解析的过程" class="headerlink" title="JSON作为数据交互的格式，存在组装和被解析的过程"></a>JSON作为数据交互的格式，存在组装和被解析的过程</h5><blockquote><p><em>网络传输效率高</em></p><p><em>数据量同XML相比，要更少</em></p></blockquote></li></ul><ul><li><h5 id="跨语言交换数据"><a href="#跨语言交换数据" class="headerlink" title="跨语言交换数据"></a>跨语言交换数据</h5><blockquote><p><em>Python调用C++，Java调用.Net</em></p><p><em>把某一种语言的功能，做成一个服务，利用这个服务的特性使用JSON来进行传递数据</em></p></blockquote></li></ul><hr><h3 id="web结构"><a href="#web结构" class="headerlink" title="web结构"></a>web结构</h3><img src="https://i.loli.net/2020/05/14/X8y7qNwKJLCHAS3.jpg" alt="Web结构图" style="zoom:150%;" /> <img src="https://i.loli.net/2020/05/14/w5rL1zEeimZpOI4.jpg" alt="数据结构图" style="zoom:150%;" /> <hr><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><blockquote><p><em>当你拿到的JSON，不是一个str，而是一个object，这是框架默认把str转换成一个object，但是我们原生拿到的就是一个str</em></p><p><em>拿到JSON，能够快速访问JSON字符串中相关的信息</em></p><p><em>把JSON字符串转换成Python中已知的数据结构</em></p></blockquote><ul><li><h4 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 引入内置json模块，其中包含一系列操纵JSON数据的方法</span><span class="token keyword">import</span> json<span class="token comment" spellcheck="true"># json格式中，字符串的key 必需使用双引号，bool值为小写</span>json_str <span class="token operator">=</span> <span class="token string">'{"name":"qiyue", "age":18, "2":false}'</span>    JavaScript中为object数据结构<span class="token comment" spellcheck="true"># 调用json模块中的内置方法，转换json字符串类型，转换为Python数据类型</span>Student <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span>转换后部分JSON格式特征，会转换为Python特征<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'qiyue'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>    Python用dict类型，承载JSON中的object类型<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span></code></pre><p><em>同一JSON字符串，在不同语言中，可能转换成不同的数据类型</em></p><p><em>这个转换过程 称为 *</em>反序列化***</p></li></ul><ul><li><h4 id="拓展：JSON数据类型-array（数组）"><a href="#拓展：JSON数据类型-array（数组）" class="headerlink" title="拓展：JSON数据类型  array（数组）"></a>拓展：JSON数据类型  array（数组）</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 反序列化</span><span class="token comment" spellcheck="true"># 引入内置json模块</span><span class="token keyword">import</span> json <span class="token keyword">as</span> xjson_str <span class="token operator">=</span> <span class="token string">'[{"name":"qiyue", "age":18, "2":false}, {"name":"qiyue", "age":18, "2":false}]'</span><span class="token comment" spellcheck="true"># 包含两个对象的数组</span>Student <span class="token operator">=</span> x<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用json模块中的内置方法，转换json格式字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span>    Python用list类型，承载JSON中的array类型<span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    访问数组中对象的key</code></pre></li></ul><p>  <em>数组表示为一种集合，类似与 Python 中的 list，tuple 。只不过Python把集合分的比较细</em></p><p>  <em>比如 PHP 中只有一个数组，且非常强大的</em> </p><p>  <em>这个是不同语言对集合不同的解构形式</em></p><p>  <em>数组其实就是一个集合</em></p><ul><li><h4 id="JSON-对应-Python-的数据类型"><a href="#JSON-对应-Python-的数据类型" class="headerlink" title="JSON  对应  Python 的数据类型"></a>JSON  对应  Python 的数据类型</h4><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>str</td></tr><tr><td>number</td><td>int</td></tr><tr><td>number</td><td>float</td></tr><tr><td>true/false</td><td>True/False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table></li></ul><p><em>若精通一门语言，入门其他语言相对比较容易</em></p><p><em>因为绝大数语言，对于基本数据结构的定义都大同小异</em></p><p><em>例如<strong>循环语句</strong>，<strong>面向对象</strong>等</em></p><p><em>现在很多语言就是经典C，C语言的<strong>语法糖</strong>，内部的实现机制，内存管理不同</em></p><p><em>现在很多语言就是<strong>类 C</strong>语言  ，语言就是一种工具</em></p><hr><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p><em>把Python的数据类型，向JSON字符串转换的过程</em></p><ul><li><h4 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonStudent <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'qiyue'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'qiyue'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dumps 接收一个object参数，dict 也是属于 object</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [{"name": "qiyue", "age": 18, "2": false}, {"name": "qiyue", "age": 18}]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;class 'str'></span></code></pre><p><em>不仅是 Python 数据向 JSON 转换，是序列化</em>    </p><p><em>把 XML 的字符串向 Python 转换，也是反序列化 / 序列化</em></p></li></ul><ul><li><h4 id="怎么把一个object存储到数据库里面去？"><a href="#怎么把一个object存储到数据库里面去？" class="headerlink" title="怎么把一个object存储到数据库里面去？"></a>怎么把一个object存储到数据库里面去？</h4><p> <code>数据库是一个个的二维表，没有办法去表示object</code></p><ul><li><h6 id="错误示例："><a href="#错误示例：" class="headerlink" title="错误示例："></a>错误示例：</h6><p><em>把 object 序列化成 JSON 字符串，或 XML 字符串</em></p><p><em>然后把字符串，存储到数据库里面去</em></p><p><em>需要的时候，从数据库里面读取出来，然后进行反序列化    *</em>效率低 / 不可取***</p></li></ul></li></ul><ul><li><h6 id="正确示例："><a href="#正确示例：" class="headerlink" title="正确示例："></a>正确示例：</h6><p><em>MySQL 等数据库适合存储比较简单的数据结构</em></p><p><em>应该把 object 拆分成一个个属性，进行存储</em></p></li></ul><p>  PS：实在是想存储 object，可使用 <strong>NOSQL</strong> <strong>MongoDB</strong></p><ul><li><h4 id="序列化的意义"><a href="#序列化的意义" class="headerlink" title="序列化的意义"></a>序列化的意义</h4><p><em>一般通过服务获取到其他语言进行序列化的 JSON 字符串</em></p></li></ul><ul><li><h4 id="XML-数据格式代码"><a href="#XML-数据格式代码" class="headerlink" title="XML 数据格式代码"></a>XML 数据格式代码</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8”?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Tove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Jani<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don’t forget me this weekend!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span> </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python扩展知识</title>
      <link href="/2020/07/12/Python/basic/extend/"/>
      <url>/2020/07/12/Python/basic/extend/</url>
      
        <content type="html"><![CDATA[<h3 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h3><p><code>产品是需要打磨出来的，重点在于打磨二字，没有什么产品可以一就而成</code></p><h3 id="字典替代switch"><a href="#字典替代switch" class="headerlink" title="字典替代switch"></a>字典替代switch</h3><ul><li><h4 id="Switch语句同样为条件分支语句"><a href="#Switch语句同样为条件分支语句" class="headerlink" title="Switch语句同样为条件分支语句"></a>Switch语句同样为条件分支语句</h4></li><li><h4 id="其他语言中Switch语句的作用，C"><a href="#其他语言中Switch语句的作用，C" class="headerlink" title="其他语言中Switch语句的作用，C#"></a>其他语言中Switch语句的作用，C#</h4></li><li><h4 id="字典映射替代switch语句"><a href="#字典映射替代switch语句" class="headerlink" title="字典映射替代switch语句"></a>字典映射替代switch语句</h4><ul><li><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_Sunday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'Sunday'</span><span class="token keyword">def</span> <span class="token function">get_Monday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'Mnoday'</span><span class="token keyword">def</span> <span class="token function">get_Tuesday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'Tuesday'</span>  <span class="token comment" spellcheck="true"># 返回字符串常量</span><span class="token keyword">def</span> <span class="token function">get_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'Unkown'</span><span class="token comment" spellcheck="true"># 使用字典代替switch语句</span>day <span class="token operator">=</span> <span class="token number">2</span>switcher <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span> <span class="token punctuation">:</span> get_Sunday<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># key对应的value，不仅仅是字符串，还可以是function类型</span>  <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token string">'Monday'</span><span class="token punctuation">,</span>  <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token string">'Tuesday'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 比switch语句，简洁，可读性强</span><span class="token comment" spellcheck="true"># 使用get函数，若dict中包含输入参数key，则返回对应的value，否则返回默认值</span>day_name <span class="token operator">=</span> switcher<span class="token punctuation">.</span>get<span class="token punctuation">(</span>day<span class="token punctuation">,</span> get_default<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ()代表执行函数</span><span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>day_name<span class="token punctuation">,</span> <span class="token string">'__call__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断对象是否为function， 建议默认值，也使用方法</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>day_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>day_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(day_name)</span><span class="token comment" spellcheck="true"># print(type(day_name))</span></code></pre></li></ul></li></ul><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><ul><li><h6 id="功能相同方法"><a href="#功能相同方法" class="headerlink" title="功能相同方法"></a>功能相同方法</h6><p><em>for in循环  map函数</em></p></li><li><h6 id="根据已有的列表，创建新的列表"><a href="#根据已有的列表，创建新的列表" class="headerlink" title="根据已有的列表，创建新的列表"></a>根据已有的列表，创建新的列表</h6></li><li><h6 id="类似数学中的-《集合推导式》"><a href="#类似数学中的-《集合推导式》" class="headerlink" title="类似数学中的 《集合推导式》"></a>类似数学中的 《集合推导式》</h6></li><li><h6 id="简洁代码"><a href="#简洁代码" class="headerlink" title="简洁代码"></a>简洁代码</h6></li><li><h6 id="不仅限于对list进行推导，也可以包含set-tuple-str-dict数据结构"><a href="#不仅限于对list进行推导，也可以包含set-tuple-str-dict数据结构" class="headerlink" title="不仅限于对list进行推导，也可以包含set tuple str dict数据结构"></a>不仅限于对list进行推导，也可以包含set tuple str dict数据结构</h6></li><li><h6 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例"></a>语法示例</h6><pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 根据变量a，创建一个新的变量b，在a列表中的每个元素，进行平方运算</span></code></pre></li></ul><h1 id="具有Python风格特色的列表推导式"><a href="#具有Python风格特色的列表推导式" class="headerlink" title="具有Python风格特色的列表推导式"></a>具有Python风格特色的列表推导式</h1><p>  b = [i**2 for i in a]</p><p>  print(b)</p><pre><code>- ###### 场景示例，加入条件判断  ```python  a = [1, 2, 3, 4, 5, 6, 7, 8]  # 根据变量a，创建一个新的变量b，在a列表中的每个元素，进行平方运算  # 场景示例，选择性改变元素  # 加入条件判断进入，列表推导式中  b = [i**3 for i in a if i &gt;= 5]  print(b)</code></pre><ul><li><h6 id="str推导式"><a href="#str推导式" class="headerlink" title="str推导式"></a>str推导式</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># str推导式</span>x <span class="token operator">=</span> <span class="token string">'1, 2, 3, 4, 5, 6, 7, 8'</span><span class="token comment" spellcheck="true"># 使用字符串中的有序元素，赋予对应的value，组成dict</span>xs <span class="token operator">=</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token number">1</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> x<span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span></code></pre></li><li><h6 id="Tuple推导式"><a href="#Tuple推导式" class="headerlink" title="Tuple推导式"></a>Tuple推导式</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># tuple推导式</span>Apple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>Orange <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> Apple <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Orange<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印出对象，因为tuple为不可变</span><span class="token keyword">for</span> orange <span class="token keyword">in</span> Orange<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>orange<span class="token punctuation">)</span></code></pre></li><li><h6 id="Dict推导式"><a href="#Dict推导式" class="headerlink" title="Dict推导式"></a>Dict推导式</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># dict推导式</span>students <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'石小乐'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token string">'王小明'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token string">'李飞飞'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 实际使用两个参数，去解包dict，可进行颠倒key，value，或取出其中某个值</span><span class="token comment" spellcheck="true"># 解包需要调用内置items函数，返回的值，在tuple中不能直接使用</span>student <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> key <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> students<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>套接字</title>
      <link href="/2020/07/12/Python/network/UDP/socket/"/>
      <url>/2020/07/12/Python/network/UDP/socket/</url>
      
        <content type="html"><![CDATA[<h3 id="Socket简介"><a href="#Socket简介" class="headerlink" title="Socket简介"></a><strong>Socket简介</strong></h3><h3 id="不同电脑上的进程之间如何通信"><a href="#不同电脑上的进程之间如何通信" class="headerlink" title="不同电脑上的进程之间如何通信"></a><strong>不同电脑上的进程之间如何通信</strong></h3><blockquote><p>首先解决的问题是如何唯一标识一个进程，否则通信无从谈起。</p><p>在一台电脑上可以通过进程号(PID) 来唯一标识一个进程，但是在网络上这是行不通的。</p><p>其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以标识唯一网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用程序(进程)。</p><p>这样利用ip地址 + 协议 + 端口 就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其他进程进行交互</p></blockquote><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><blockquote><ul><li>“进程”：运行的程序以及运行时用到的资源这个整体称之为进程</li><li>“进程间通信”：运行的程序之间的数据共享</li></ul></blockquote><p><strong>什么是Socket</strong></p><blockquote><p>Socket(简称：套接字)是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：</p><p>它能实现不同主机间的进程通信，我们网络上各种各样的服务大多同时基于Socket来完成通信的，例如我们每天浏览网页，QQ聊天，收发Email等等。</p></blockquote><h3 id="创建Socket"><a href="#创建Socket" class="headerlink" title="创建Socket"></a><strong>创建Socket</strong></h3><ul><li><p>在Python中使用socket模块中的socket方法就可以完成</p><pre class=" language-python"><code class="language-python">socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>Family<span class="token punctuation">,</span> Type<span class="token punctuation">)</span> </code></pre></li></ul><h6 id="简述"><a href="#简述" class="headerlink" title="简述:"></a>简述:</h6><ul><li>socket类创建的对象，该对象带有两个默认参数:</li></ul><blockquote><ul><li><p>family:</p><p>可以选择AF_INET(用于internet进程间通信) 或者AF_UNIX(用于 同一台机器进程间通信)， 实际工作中常用AF_INET</p></li><li><p>type:</p></li><li><p>套接字类型，可以是SOCKET_ STREAM(流式套接字， 主要用于TCP协议)或者SOCK_ DGRAM(数据报套接字，主要用于UDP协议)</p></li></ul></blockquote><p><img src="https://i.loli.net/2020/05/14/oj1zVkDhN8vpnOm.jpg" alt=""> </p><h3 id="发送UDP数据"><a href="#发送UDP数据" class="headerlink" title="发送UDP数据"></a>发送UDP数据</h3><p><img src="https://i.loli.net/2020/05/14/hbO8WdYC6isVypr.jpg" alt=""> </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 创建一个udp的套接字</span>  udp_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 循环发送，并支持exit指令退出程序</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></code></pre><pre><code>  ##### 接收键盘输入信息</code></pre><pre class=" language-python"><code class="language-python">      content <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入内容： '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>     <span class="token comment" spellcheck="true"># udp_socket.sendto(数据, 目的IP与Port)</span>    udp_socket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>content<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'10.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 关闭套接字</span>      udp_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="接受UDP数据"><a href="#接受UDP数据" class="headerlink" title="接受UDP数据"></a><strong>接受UDP数据</strong></h3><p><code>如果程序要接收数据，必须固定端口</code></p><h6 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 1. 创建udp套接字</span>  udp_socket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2. 添加本地信息</span>  local_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">7878</span><span class="token punctuation">)</span> 必须是本机的ip port  udp_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>local_address<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3. 接收数据</span>  receive_data <span class="token operator">=</span> udp_socket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    数据bytes大小  接收的数据是一个tuple类型，包含发送方的数据，ip，port<span class="token punctuation">(</span>b’data’<span class="token punctuation">,</span> <span class="token punctuation">(</span>‘<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.0</span>’ <span class="token punctuation">,</span>  port<span class="token punctuation">)</span><span class="token punctuation">)</span>     receive_msg <span class="token operator">=</span> receive_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 存储接收的信息</span>    send_address <span class="token operator">=</span> receive_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 存储发送方的地址</span>    <span class="token comment" spellcheck="true"># 4. 打印数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s:%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>send_address<span class="token punctuation">)</span><span class="token punctuation">,</span> receive_msg<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5. 关闭套接字</span>  udp_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="绑定端口"><a href="#绑定端口" class="headerlink" title="绑定端口"></a><strong>绑定端口</strong></h3><blockquote><p>当网络程序开始运行，进行收发数据，未进行固定端口，系统则随机分配一个端口，结束进程则释放该端口。</p><p>一般接收方需事先绑定端口</p></blockquote><h6 id="注意：UDP中端口不能被占用"><a href="#注意：UDP中端口不能被占用" class="headerlink" title="注意：UDP中端口不能被占用"></a>注意：UDP中端口不能被占用</h6><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h3><h6 id="recvfrom-在数据没有到来是会怎样？"><a href="#recvfrom-在数据没有到来是会怎样？" class="headerlink" title="recvfrom 在数据没有到来是会怎样？"></a>recvfrom 在数据没有到来是会怎样？</h6><ul><li><p>调用recvfrom之后，数据未到</p><p><code>它会处于堵塞状态</code></p></li><li><p>没有调用recvfrom之前，数据已到</p><p><code>数据首先进入操作系统缓存区，再调用recvfrom找到数据</code></p><p><strong>注意</strong>：易导致操作系统内存占满</p></li></ul><h6 id="socket是-全双工？"><a href="#socket是-全双工？" class="headerlink" title="socket是 全双工？"></a>socket是 全双工？</h6><p>​    <code>套接字是一个，可以同时 收发数据的</code></p><h6 id="飞秋通信用的是2425端口，那么qq呢？qq怎样通信？"><a href="#飞秋通信用的是2425端口，那么qq呢？qq怎样通信？" class="headerlink" title="飞秋通信用的是2425端口，那么qq呢？qq怎样通信？"></a>飞秋通信用的是2425端口，那么qq呢？qq怎样通信？</h6><h6 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a><strong>扩展知识</strong></h6><ul><li><p>单工：收音机此类，无法发送数据，只能接收数据</p></li><li><p>半双工：对讲机，可以收发数据，但不能同时收发</p></li><li><p>全双工：可以同时收发数据</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> UDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口</title>
      <link href="/2020/07/12/Python/network/UDP/port/"/>
      <url>/2020/07/12/Python/network/UDP/port/</url>
      
        <content type="html"><![CDATA[<h5 id="什么是端口"><a href="#什么是端口" class="headerlink" title="什么是端口"></a><strong>什么是端口</strong></h5><p><img src="https://i.loli.net/2020/05/14/nGIYhVztZOgE4vw.jpg" alt="示意图"> </p><p>网络通信必备IP ，端口</p><p>端口就好比是一个房子的门，是出入这间房子的必经之路。</p><p><img src="https://i.loli.net/2020/05/14/1cmJbiZe4akPorI.jpg" alt=""> </p><p>扩展知识：一个程序没有运行之间称之为“程序”，程序运行起来之后称为“进程”</p><p>如果一个程序需要收发网络数据，那么就需要有这样的端口</p><p>在linux系统中，端口可以有65536（2的16次方）个之多</p><p>既然有这么多，操作系统为了同一管理，所以进行了编号，这就是端口号</p><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a><strong>端口号</strong></h5><ul><li>端口是通过端口号来标记的，端口号只有整数，范围是从0到65535</li></ul><blockquote><p>注意：端口数不一样的nix系统不一样，还可以手动修改。</p></blockquote><h5 id="端口是怎样分配的"><a href="#端口是怎样分配的" class="headerlink" title="端口是怎样分配的"></a><strong>端口是怎样分配的</strong></h5><ul><li><p>端口号不是随意使用的，而是按照一定的规定进行分配的。</p></li><li><p>端口的分类标准有好几种，我们这里不做详细讲解，只介绍一下知名端口和动态端口</p></li></ul><p><strong>知名端口（Well Known Ports）</strong></p><ul><li><p>知名端口就是众所周知的端口号，范围从0到1023</p></li><li><p>80端口分配给HTTP服务 </p></li><li><p>21端口分配给FTP服务</p></li></ul><blockquote><p>一般情况下，如果一个程序需要使用知名端口，需要获得ROOT权限</p></blockquote><p><strong>动态端口（Dynamic Ports）</strong></p><ul><li><p>动态端口的范围是从1024到65535</p></li><li><p>之所以称为动态端口，是因为这个范围的端口号未绑定某个服务，而是动态分配。</p></li><li><p>动态分配是指当一个系统程序或应用程序需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。</p></li><li><p>当这个程序关闭时，同时也就释放了它所占用的端口号</p></li></ul><p><strong>怎样查看端口号</strong></p><ul><li><p>命令：netstat -an 查看端口状态</p></li><li><p>命令：lsof -i [tcp/udp]:2425    </p></li></ul><p><strong>小总结</strong></p><ul><li><p>端口有什么用呢？</p><blockquote><p>​    我们知道，一台拥有IP地址的主机可以提供许多服务，比如HTTP（万维网服务），FTP（文件传输），SMTP（电子邮件）等，这些服务完全可以通过一个IP地址来实现。</p><p>那么，主机怎样区分不同的网络服务呢? 显然不能只靠IP地址，因为IP地址与网络服务的关系是一对多的关系。</p><p>实际上是通过IP地址 + 端口号来区分不同的服务的。</p><p>需要注意的是，端口并不是一一对应的。</p><p>比如你的电脑作为客户机访问一台WWW服务器时，WWW服务器使用“80”端口与你的电脑通信，但你的电脑则可能使用“1234”这样的端口。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> UDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Port </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="/2020/07/12/Python/network/UDP/network-basic/"/>
      <url>/2020/07/12/Python/network/UDP/network-basic/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是网络"><a href="#什么是网络" class="headerlink" title="什么是网络"></a><strong>什么是网络</strong></h4><blockquote><p>通信方式进行传输数据，这就是网络的一种体现</p><p>对讲机也是一种无线电电磁波传输信息，这就是网络。</p><p>网络不仅仅是可视化网线</p></blockquote><ul><li><h5 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h5></li></ul><blockquote><p>网络就是一种辅助双方或者多方能够连接在一起的工具</p><p>如果没有网络可想单机世界是多么的孤独</p></blockquote><h4 id="使用网络的目的"><a href="#使用网络的目的" class="headerlink" title="使用网络的目的"></a><strong>使用网络的目的</strong></h4><ul><li><p>为了联通多方然后进行通信的，即把数据从一方传递给另一方</p></li><li><p>为了让在不同的电脑上运行的软件，之间能够互相传递数据，就需要网络</p></li></ul><h5 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h5><ul><li><p>使用网络能够把多方连接在一起，然后可以进行数据传递</p></li><li><p>所谓的网络编程就是，让在不同的电脑上运行的程序进行数据传递，即进程之间的通信</p></li></ul><p><img src="https://i.loli.net/2020/05/14/w9U54MRgLthZIPB.jpg" alt="网络传输略图"> </p><ul><li><p>同一公司，班级传输数据是一个局域网</p></li><li><p>不同城市，国家专属数据是万维网，互联网</p></li><li><p>不管是蓝牙，WIFI，网线都是网络功能</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="/2020/07/12/Python/network/UDP/linux-cmd/"/>
      <url>/2020/07/12/Python/network/UDP/linux-cmd/</url>
      
        <content type="html"><![CDATA[<h4 id="查看操作系统的网卡信息"><a href="#查看操作系统的网卡信息" class="headerlink" title="查看操作系统的网卡信息"></a><strong>查看操作系统的网卡信息</strong></h4><h5 id="Ubuntu系统"><a href="#Ubuntu系统" class="headerlink" title="Ubuntu系统"></a><strong>Ubuntu系统</strong></h5><ul><li><h6 id="安装查看工具："><a href="#安装查看工具：" class="headerlink" title="安装查看工具："></a>安装查看工具：</h6><pre class=" language-shell"><code class="language-shell">sudo apt-get install net-tools</code></pre></li></ul><ul><li><h6 id="安装完毕后输入："><a href="#安装完毕后输入：" class="headerlink" title="安装完毕后输入："></a>安装完毕后输入：</h6><pre><code>ifconfig</code></pre></li></ul><ul><li><h6 id="以太网："><a href="#以太网：" class="headerlink" title="以太网："></a>以太网：</h6><pre><code>ens_xxx</code></pre></li></ul><ul><li><h6 id="本地网卡环回："><a href="#本地网卡环回：" class="headerlink" title="本地网卡环回："></a>本地网卡环回：</h6><pre><code>io</code></pre></li></ul><ul><li><h6 id="关闭以太网网卡："><a href="#关闭以太网网卡：" class="headerlink" title="关闭以太网网卡："></a>关闭以太网网卡：</h6><pre class=" language-shell"><code class="language-shell">sudo ifconfig ensxx down</code></pre></li></ul><ul><li><h6 id="开启以太网网卡："><a href="#开启以太网网卡：" class="headerlink" title="开启以太网网卡："></a>开启以太网网卡：</h6><pre class=" language-shell"><code class="language-shell">sudo ifconfig ensxx up</code></pre></li></ul><h5 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a><strong>Windows系统</strong></h5><ul><li><h6 id="查看命令："><a href="#查看命令：" class="headerlink" title="查看命令："></a>查看命令：</h6><pre><code>ipconfig</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址</title>
      <link href="/2020/07/12/Python/network/UDP/ip-addr/"/>
      <url>/2020/07/12/Python/network/UDP/ip-addr/</url>
      
        <content type="html"><![CDATA[<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a><strong>IP地址</strong></h3><h5 id="什么是IP地址"><a href="#什么是IP地址" class="headerlink" title="什么是IP地址"></a><strong>什么是IP地址</strong></h5><ul><li><p>用来标记网络上的一台电脑</p></li><li><p>局域网ip地址可以相同，但会导致冲突（数据丢失）</p></li><li><p>所以ip地址允许重复</p></li></ul><h5 id="IP地址的作用"><a href="#IP地址的作用" class="headerlink" title="IP地址的作用"></a><strong>IP地址的作用</strong></h5><p><img src="https://i.loli.net/2020/05/14/1CkuZVbasIdU6fS.jpg" alt="拓扑图"> </p><ul><li>IP地址：用来在网络中标记一个终端，比如192.168.1.1; 在本地局域网内是唯一的。</li></ul><p><strong>IP地址的分类（了解）</strong></p><p>每一个IP地址包括两部分：<strong>网络地址与主机地址</strong></p><p><img src="https://i.loli.net/2020/05/14/LoZUA2qjb831dJD.jpg" alt="IP分类示意图"> </p><ul><li><p><strong>pv4 全称 internet protocol version 4</strong> </p><p>概述：Ip地址标记网络里面的第四种版本</p><p>格式：xxx.xxx.xxx.xxx 最大值是：255  最小值是：0</p><p>总数应该是：256<em>256</em>256*256</p><p>拓展：ip v1-v3-v5是实验版本</p></li></ul><ul><li><p><strong>Ipv6 全称 internet protocol version 6</strong></p><p>​    概述：因为ipv4的IP段使用已饱和，所以诞生ipv6，且尚未普及</p><p>​    格式：x:x:x:x:x:x:x:x，其中每个 x 是地址的 8 个 16 位部分的十六进制值。</p><p>​    IPv6地址范围从 0000:0000:0000:0000:0000:0000:0000:0000 至 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff。</p><p>​    总数：能产生2的128次方个IP地址，其资源几乎是无穷的</p></li></ul><p>​    </p><p><strong>A类IP地址</strong></p><blockquote><p>192.168.0.1中 192.168.0代表网络地址，168.0.1代表主机地址</p><p>其中主机地址0与255不能用，可以ip池为256<em>256</em>256=16777216种</p></blockquote><p><strong>B类IP地址</strong></p><blockquote><p>192.168.0.1中 192.168.0代表网络地址，0.1代表主机地址</p><p>其中主机地址0与255不能用，可以ip池为256*256=65536种</p></blockquote><p><strong>C类IP地址</strong></p><blockquote><p>192.168.0.1中 192.168.0代表网络地址，1代表主机地址</p><p>其中主机地址0与255不能用，可以ip池为254种</p></blockquote><p><strong>D类IP地址用于多点广播</strong></p><blockquote><p>D类IP地址第一个字节”1110”开始，它是一个专门保留的地址。</p><p>它并不指向特定的网络地址，目前这一类地址被用在多点广播中</p><p>多点广播地址用来一次寻址一组计算机s地址范围224.0.0.1-239.255.255.254</p></blockquote><p><strong>E类IP地址</strong></p><blockquote><p>以”1111”开始，为将来留作保留</p><p>仅作为实验与开发使用</p></blockquote><p><strong>私有IP</strong></p><blockquote><p>在这么多网络IP中，国际规定中有一部分IP是用于我们的局域网使用，也就是属于私网IP，不在公网中使用，它们的范围是：</p><p>10.0.0.0 ~ 10.255.255.255</p><p>172.16.0.0 ~ 172.31.255.255</p><p>192.168.0.0 ~ 192.168.255.255</p></blockquote><p><strong>注意事项</strong></p><blockquote><p>IP地址127·0·0·1 ~ 127·255·255·255用于回路测试。</p><p>如：127·0·0·1 可以代表本机IP，用于<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> </p><p>就可以测试本机中配置的Web服务器</p></blockquote><p><strong>总结</strong></p><blockquote><p>根据使用IP的主机数，来划分各类IP段</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化测试</title>
      <link href="/2020/07/07/Python/interface/interface_test_basic/"/>
      <url>/2020/07/07/Python/interface/interface_test_basic/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要做接口测试？"><a href="#为什么要做接口测试？" class="headerlink" title="为什么要做接口测试？"></a>为什么要做接口测试？</h4><ul><li><p>在日常前后端开发中，他们之间为什么是独立完成的？</p></li><li><p>接口的由来：连接前后端，以及移动端</p></li><li><p>不同端的工作进度不一样，需要对最开始出来的接口，进行接口测试</p></li></ul><hr><h4 id="接口测试带来了哪些好处？"><a href="#接口测试带来了哪些好处？" class="headerlink" title="接口测试带来了哪些好处？"></a>接口测试带来了哪些好处？</h4><ul><li><p>比如调用第三方的接口，淘宝，银行，支付宝…，那么我们就要进行接口测试，以及验证数据</p></li><li><p>节约时间，缩短项目时间</p></li><li><p>提高工作效率</p></li><li><p>提高系统的稳定性</p></li></ul><hr><h4 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是接口？</h4><ul><li><p>http请求 -&gt; 接口 ，不断地操作系统 -&gt; 系统不断的去服务端，第三方服务调用接口</p></li><li><h6 id="接口的种类"><a href="#接口的种类" class="headerlink" title="接口的种类"></a>接口的种类</h6><ol><li>内部接口</li><li>外部接口</li><li>我们测试的接口，接收测试http，tcp请求</li></ol></li><li><h6 id="Get，Post请求是日常中，使用较多的接口类型"><a href="#Get，Post请求是日常中，使用较多的接口类型" class="headerlink" title="Get，Post请求是日常中，使用较多的接口类型"></a>Get，Post请求是日常中，使用较多的接口类型</h6><p> <img src="https://i.loli.net/2020/05/14/SvVYLXxai9QuWz2.jpg" alt=""></p></li><li><h6 id="Get，Post的区别"><a href="#Get，Post的区别" class="headerlink" title="Get，Post的区别"></a>Get，Post的区别</h6><blockquote><p>理论上GET请求数据长度没有限制的，真正起到限制的是浏览器对其长度进行了限制。</p><p>POST请求理论上也是不限制大小的，真正对其大小进行限制的是服务器的处理程序能力</p></blockquote></li><li><h6 id="参数提交方式"><a href="#参数提交方式" class="headerlink" title="参数提交方式"></a>参数提交方式</h6></li></ul><blockquote><p>Post请求的数据是WebForm里面的，以表单的形式提交</p><p>Get请求的数据是在地址栏中，进行请求的</p><p>接口地址以？分隔开，后面就是数据，以&amp;连接符连接</p></blockquote><ul><li><h6 id="请求数据大小"><a href="#请求数据大小" class="headerlink" title="请求数据大小"></a>请求数据大小</h6></li></ul><blockquote><p>Get请求的数据相比Post是较少的</p><p>GET请求的URL长度根据不同的浏览器，会有不同的字节限制</p></blockquote><table><thead><tr><th>Browser</th><th>Length</th></tr></thead><tbody><tr><td>IE</td><td>URL &lt;= 2083  Path &lt;= 2048</td></tr><tr><td>Firefox</td><td>65536</td></tr><tr><td>Safari</td><td>80000以上</td></tr><tr><td>Opera</td><td>190000以上      超出最大抓取/索引字节长度 会报414</td></tr><tr><td>Chrome</td><td>8182</td></tr><tr><td>Apache Sever</td><td>8192</td></tr><tr><td>iis</td><td>16384</td></tr><tr><td>Perl Http:Daemon</td><td>至少8000</td></tr></tbody></table><ul><li><h6 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h6></li></ul><blockquote><p>Get请求的用户信息在URL栏中，安全性相比Post表单请求，安全性低</p></blockquote><h4 id="接口测试流程"><a href="#接口测试流程" class="headerlink" title="接口测试流程"></a>接口测试流程</h4><ul><li><p>一个简单的事情，需要认真，有条理的去执行</p></li><li><p>可能当时没有出错，谁又能保证以后不出错，尽量做好万全的准备</p></li></ul><h6 id="熟悉接口测试流程的好处："><a href="#熟悉接口测试流程的好处：" class="headerlink" title="熟悉接口测试流程的好处："></a>熟悉接口测试流程的好处：</h6><blockquote><p>以备面试所需</p><p>熟悉接下来的流程</p><p>掌握基础知识</p><p>面试时，通常基础知识问答较多</p></blockquote><h6 id="测试流程的重点："><a href="#测试流程的重点：" class="headerlink" title="测试流程的重点："></a>测试流程的重点：</h6><p><code>设计用例</code></p><ol><li>理清思路，避免漏测（不可进行随机测试）</li><li>提高测试效率</li><li>跟进测试进度</li><li>证明进行过测试（一种凭证）</li><li>跟进重复性工作</li><li>黑盒：需求文档</li><li>接口测试：需要开发提供的API文档</li></ol><h6 id="接口测试用例设计"><a href="#接口测试用例设计" class="headerlink" title="接口测试用例设计"></a>接口测试用例设计</h6><img src="https://i.loli.net/2020/05/14/brpugR3AKnjfk28.jpg" alt="" style="zoom:150%;" /> <h4 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h4><ul><li><p>提高工作效率，不管是否上线</p></li><li><p>使用工具的目的</p></li></ul><h6 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h6><blockquote><p>10分钟测试10个get接口，使用不熟悉的loadrunner录制脚本，对接口进行参数化，然后查看日志结果。此时就不宜使用臃肿的测试工具</p></blockquote><ul><li><p>如何选择接口测试工具</p><blockquote><p>时间，简易程度，业务复杂度，测试员能力</p></blockquote></li></ul><h6 id="接口测试工具分类"><a href="#接口测试工具分类" class="headerlink" title="接口测试工具分类"></a>接口测试工具分类</h6><table><thead><tr><th>Tools</th><th>Purpose</th><th></th></tr></thead><tbody><tr><td>Httpwatch</td><td>HTTP</td><td>仅支持IE，firefox浏览器，看数据比较麻烦</td></tr><tr><td>Wireshark</td><td>TCP/HTTP</td><td>功能齐全，经过PC端的请求http/tcp，都能抓取到，所以数据量大，查看比较麻烦</td></tr><tr><td>Fiddler</td><td>HTTP</td><td>可直接抓取http请求，小巧，功能完善，启动快捷，代理方便</td></tr></tbody></table><h6 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h6><ul><li>Loadrunner</li></ul><blockquote><p>第一印象：是一个性能测试工具</p><p>功能强大，可以进行接口测试</p><p>所有性能测试都是基于http请求的</p><p>把接口按照http请求的格式，进行测试 </p><p>通过两个函数</p></blockquote><ul><li>Fidder</li></ul><blockquote><p>轻量级抓包兼测试工具</p></blockquote><ul><li>SoapUI</li></ul><blockquote><p>比较强大的测试工具，可以做接口，也可以做自动化</p><p>功能也比较齐全，返回的乱码可进行转换，打开接口文档对比</p></blockquote><ul><li>Jmeter</li></ul><blockquote><p>不仅仅是性能测试，可以使用http请求进行接口测试</p></blockquote><ul><li>Postman</li></ul><blockquote><p>测试中常用选择</p></blockquote><h6 id="接口测试工具-三剑客"><a href="#接口测试工具-三剑客" class="headerlink" title="接口测试工具-三剑客"></a>接口测试工具-<strong>三剑客</strong></h6><ul><li>Postman</li></ul><blockquote><p>导入body中的数据一定要仔细核对</p><p>如何自动反复测试带header的Post请求，并且针对线上，测试环境同一个数据进行测试。并对实际结果作比较，作为测试结果</p><p>各种类型接口测试</p><p>按需求添加cookie，header</p><p>操作记录清晰</p><p>多接口同时测试</p><p>方便回归</p><p>提高技能水平</p></blockquote><ul><li><p>Fiddler</p><p>简介：</p><p><code>是一款http协议代理调试工具，能够记录并检查电脑与互联网之间所有的http协议，设置断点，查看所有”进出”Fiddler的数据</code></p><p>工作原理：</p><p>   <img src="https://i.loli.net/2020/05/14/FB5q6WNy8RxQe1M.jpg" alt=""> </p><p>运用步骤：</p><blockquote><p>查看接口请求方式</p><p>查看请求数据，响应数据</p><p>接口返回状态</p><p>设置代理（抓取移动端接口请求）</p><p>查看header，cookie</p><p>设置断点</p><p>添加筛选</p><p>接口测试</p></blockquote></li><li><p>Python自开发</p></li></ul><blockquote><p>工具没法满足需求时</p><p>安全性</p><p>业务限制</p><p>逻辑清晰-&gt;表达，理解能力强-&gt;看懂代码-&gt;会写代码-&gt;会改代码</p><p>测试流程</p><p>通过urllib urllib2 扩展库</p><p>定义接口地址</p><p>定义请求数据</p><p>整理请求数据</p><p>按照格式拼接，按照规定格式发送server</p><p>发送数据并获取返回结果    </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InterFace Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化介绍</title>
      <link href="/2020/07/07/Python/interface/interface_automation/"/>
      <url>/2020/07/07/Python/interface/interface_automation/</url>
      
        <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><p><code>合格的自动化测试工程师 -&gt; 接口自动化测试框架</code></p><p><code>入门条件 -&gt;  设计-开发-重构框架</code></p><p><code>进阶之路：接口基础 -&gt; 接口开发 -&gt; Unittest与接口测试结合 -&gt; 设计，开发框架</code></p><h4 id="接口基础"><a href="#接口基础" class="headerlink" title="接口基础"></a>接口基础</h4><ul><li><h6 id="HTTP接口熟悉"><a href="#HTTP接口熟悉" class="headerlink" title="HTTP接口熟悉"></a>HTTP接口熟悉</h6></li><li><h6 id="常见接口介绍"><a href="#常见接口介绍" class="headerlink" title="常见接口介绍"></a>常见接口介绍</h6></li><li><h6 id="接口工具的使用"><a href="#接口工具的使用" class="headerlink" title="接口工具的使用"></a>接口工具的使用</h6></li><li><h6 id="接口测试基础的面试"><a href="#接口测试基础的面试" class="headerlink" title="接口测试基础的面试"></a>接口测试基础的面试</h6></li><li><h6 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h6><ul><li>使用Django，开发Get，Post请求</li><li>掌握Unittest与接口测试的结合</li><li>Unittest使用，断言，HTMLTestRunner，Case的管理，Request的引入使用</li></ul></li></ul><hr><h4 id="接口自动化测试框架从设计到开发"><a href="#接口自动化测试框架从设计到开发" class="headerlink" title="接口自动化测试框架从设计到开发"></a>接口自动化测试框架从设计到开发</h4><ul><li><h6 id="设计框架"><a href="#设计框架" class="headerlink" title="设计框架"></a>设计框架</h6></li><li><h6 id="根据框架，设计工具封装"><a href="#根据框架，设计工具封装" class="headerlink" title="根据框架，设计工具封装"></a>根据框架，设计工具封装</h6></li><li><h6 id="基类封装"><a href="#基类封装" class="headerlink" title="基类封装"></a>基类封装</h6></li><li><h6 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h6></li><li><h6 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h6></li><li><h6 id="回写测试结果"><a href="#回写测试结果" class="headerlink" title="回写测试结果"></a>回写测试结果</h6></li><li><h6 id="解决数据依赖"><a href="#解决数据依赖" class="headerlink" title="解决数据依赖"></a>解决数据依赖</h6></li><li><h6 id="结果统计"><a href="#结果统计" class="headerlink" title="结果统计"></a>结果统计</h6></li><li><h6 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h6></li><li><h6 id="发送报告"><a href="#发送报告" class="headerlink" title="发送报告"></a>发送报告</h6></li><li><h6 id="常见接口测试查缺补漏"><a href="#常见接口测试查缺补漏" class="headerlink" title="常见接口测试查缺补漏"></a>常见接口测试查缺补漏</h6></li><li><h6 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h6></li><li><h6 id="操作cookie"><a href="#操作cookie" class="headerlink" title="操作cookie"></a>操作cookie</h6></li></ul><hr><h4 id="接口基础面试"><a href="#接口基础面试" class="headerlink" title="接口基础面试"></a>接口基础面试</h4><ul><li><h6 id="如何理解接口？"><a href="#如何理解接口？" class="headerlink" title="如何理解接口？"></a>如何理解接口？</h6></li></ul><blockquote><p>前后端解耦，需要一个桥梁，负责前后端传输数据</p></blockquote><ul><li><h6 id="接口测试和功能测试的区别"><a href="#接口测试和功能测试的区别" class="headerlink" title="接口测试和功能测试的区别"></a>接口测试和功能测试的区别</h6></li></ul><blockquote><p>是功能测试的一种，功能测试的定义非常广泛</p><p>自动化属于功能测试，无论是接口还是自动化测试，都是模拟用户的操作</p><p>接口测试只是模拟用户发送数据，只是没有经过前端/客户端</p><p>自动化模拟用户操作，减去了手工操作，通过脚本去实现</p><p>在国内来说，技术能力可能会比功能测试好-含金量不同</p></blockquote><ul><li>常见的接口类型</li></ul><blockquote><p>Post，get，put，delete</p></blockquote><ul><li>接口是如何传递参数</li></ul><blockquote><p>Get请求?前方为URL地址，后方为消息主体/请求数据</p><p>Post请求是以WebFrom/表单的形式提交数据</p></blockquote><ul><li>如何测试一个接口？</li></ul><blockquote><p>Fiddler  Postman  soapUI  Loadrunner  Jmeter</p><p>工具只是一种实现方式而已</p><p>怎么简单怎么做（主要是效率）</p></blockquote><hr><h4 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h4><ul><li><h6 id="为什么模拟请求"><a href="#为什么模拟请求" class="headerlink" title="为什么模拟请求"></a>为什么模拟请求</h6></li></ul><blockquote><p>解耦很重要</p><p>并行开发很重要（效率第一）</p><p>使用Fiddler模拟请求</p><p>步骤：进入Composer工具栏，传入对应headers，body</p></blockquote><ul><li><h6 id="使用fiddler模拟响应"><a href="#使用fiddler模拟响应" class="headerlink" title="使用fiddler模拟响应"></a>使用fiddler模拟响应</h6></li></ul><blockquote><p>进入AutoResponder工具栏，传入对应url，以及对应的response数据</p></blockquote><h4 id="搭建Django框架-测试环境"><a href="#搭建Django框架-测试环境" class="headerlink" title="搭建Django框架-测试环境"></a>搭建Django框架-测试环境</h4><p><code>开发web端是比较实用的</code></p><ul><li><h6 id="安装Django框架"><a href="#安装Django框架" class="headerlink" title="安装Django框架"></a>安装Django框架</h6></li></ul><blockquote><p>在线安装：pip install Django  ==指定版本</p><p>离线安装：python setup.py install</p><ol><li>官网下载所需版本</li><li>解压，然后在cmd中，进入存放目录，输入命令</li><li>在终端输入命令：django-admin startproject HelloWorld（项目名可修改）</li></ol></blockquote><p>​    <img src="https://i.loli.net/2020/05/14/Za794SwAxVEYXbf.jpg" alt="项目结构"> </p><ul><li><h6 id="HelloWorld-根目录"><a href="#HelloWorld-根目录" class="headerlink" title="HelloWorld/根目录"></a>HelloWorld/根目录</h6></li></ul><blockquote><p>项目的容器。它的名字对Django无关紧要。您可以将其重命名为您喜欢的任何名称。</p></blockquote><ul><li><h6 id="manage-py"><a href="#manage-py" class="headerlink" title="manage.py"></a>manage.py</h6></li></ul><blockquote><p>一个命令行实用程序，可让您以各种方式与该Django项目进行交互。您可以manage.py在 <a href="https://docs.djangoproject.com/en/3.0/ref/django-admin/" target="_blank" rel="noopener">django-admin和manage.py中</a> 阅读有关的所有详细信息 。</p></blockquote><ul><li><h6 id="内部HelloWorld-目录"><a href="#内部HelloWorld-目录" class="headerlink" title="内部HelloWorld/目录"></a>内部HelloWorld/目录</h6></li></ul><blockquote><p>是项目的实际Python包。它的名称是Python包名称，您需要使用它来导入其中的任何内容（例如HelloWorld.urls）。</p></blockquote><ul><li><h6 id="HelloWorld-init-py"><a href="#HelloWorld-init-py" class="headerlink" title="HelloWorld/init.py"></a>HelloWorld/<strong>init</strong>.py</h6></li></ul><blockquote><p>一个空文件，告诉Python该目录应视为Python软件包。如果您是Python初学者，请在Python官方文档中阅读<a href="#tut-packages">有关包的更多信息</a>。</p></blockquote><ul><li><h6 id="HelloWorld-settings-py"><a href="#HelloWorld-settings-py" class="headerlink" title="HelloWorld/settings.py"></a>HelloWorld/settings.py</h6></li></ul><blockquote><p>此Django项目的设置/配置。 <a href="https://docs.djangoproject.com/en/3.0/topics/settings/" target="_blank" rel="noopener">Django设置</a>将告诉您所有设置的工作方式。</p></blockquote><ul><li><h6 id="HelloWorld-urls-py"><a href="#HelloWorld-urls-py" class="headerlink" title="HelloWorld/urls.py"></a>HelloWorld/urls.py</h6></li></ul><blockquote><p>此Django项目的URL声明；Django支持的网站的“目录”。您可以在<a href="https://docs.djangoproject.com/en/3.0/topics/http/urls/" target="_blank" rel="noopener">URL调度</a>程序中阅读有关URL的更多信息。</p></blockquote><ul><li><h6 id="HelloWorld-asgi-py"><a href="#HelloWorld-asgi-py" class="headerlink" title="HelloWorld/asgi.py"></a>HelloWorld/asgi.py</h6></li></ul><blockquote><p>与ASGI兼容的Web服务器为您的项目提供服务的入口点。有关更多详细信息，请参见<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/" target="_blank" rel="noopener">如何使用ASGI</a>进行<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/" target="_blank" rel="noopener">部署</a>。</p></blockquote><ul><li><h6 id="HelloWorld-wsgi-py"><a href="#HelloWorld-wsgi-py" class="headerlink" title="HelloWorld/wsgi.py"></a>HelloWorld/wsgi.py</h6></li></ul><blockquote><p>与WSGI兼容的Web服务器为您的项目提供服务的入口点。有关更多详细信息，请参见<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/" target="_blank" rel="noopener">如何使用WSGI</a>进行<a href="https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/" target="_blank" rel="noopener">部署</a></p></blockquote><ul><li><h6 id="运行django"><a href="#运行django" class="headerlink" title="运行django"></a>运行django</h6></li></ul><blockquote><p>在根目录下，在终端中运行：python manage.py runserver 127.0.0.1:8000</p><p>在browser中，输入127.0.0.1:8000</p></blockquote><h4 id="创建工程应用app"><a href="#创建工程应用app" class="headerlink" title="创建工程应用app"></a>创建工程应用app</h4><ul><li><h6 id="创建新的app，使用系统模块manage"><a href="#创建新的app，使用系统模块manage" class="headerlink" title="创建新的app，使用系统模块manage"></a>创建新的app，使用系统模块manage</h6></li></ul><blockquote><p> 回到根目录，进入终端：python manage.py startapp name</p></blockquote><ul><li><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6></li></ul><blockquote><p>需要知道地址怎么到server的，访问urls.py中的方法，执行urlpatterns中的方法</p><p>创建的app中的views.py模块中，定义方法</p><p><img src="https://i.loli.net/2020/05/14/a1u3CwOQHek2FWR.jpg" alt=""> </p><p>在urls.py模块中，引入login方法，urlpatterns变量中，调用login方法</p><p><img src="https://i.loli.net/2020/05/14/MQjWEqdRBs8uaeP.jpg" alt=""> </p></blockquote><ul><li><em>用户在敲下你的网址并回车，生成请求</em></li><li><em>请求传递到urls.py；Django去urlpatterns中匹配链接（Django会在匹配到的第一个就停下来）</em></li><li><em>一旦匹配成功，Django便会给出相应的view页面（该页面可以为一个Python的函数，或者基于view（Django内置的）的类），也就是用户看到的页面</em></li><li><em>若匹配失败，则出现错误的页面</em></li><li><em>一个工程项目，有很多个APP，每个APP都是工程组成的一部分</em></li></ul><h4 id="开发接口"><a href="#开发接口" class="headerlink" title="开发接口"></a>开发接口</h4><ul><li><h5 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h5></li></ul><blockquote><p>都是基于代码</p><p>框架就是把所有的代码进行整合，写的简洁一些，逻辑是没有改变的</p><p>无非是多个中间服务商，Apache，Nginx之类的</p><p>只需要知道url跳转到哪儿，在哪儿解析，Response什么信息</p><p>真正的API在views模块里面</p><h6 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h6><ul><li>代理端口需区分，否则会冲突 </li><li>HTML中form表单，与from区分</li><li>HTML中路径需以/斜杠结尾</li></ul></blockquote><ul><li><h5 id="Unittest"><a href="#Unittest" class="headerlink" title="Unittest"></a>Unittest</h5><ul><li><h6 id="创建一个类的时候，继承Unittest框架中TestCase类"><a href="#创建一个类的时候，继承Unittest框架中TestCase类" class="headerlink" title="创建一个类的时候，继承Unittest框架中TestCase类"></a>创建一个类的时候，继承Unittest框架中TestCase类</h6></li><li><h6 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h6><table><thead><tr><th>Command</th><th>Describe</th></tr></thead><tbody><tr><td>setUp</td><td>每次方法之前执行</td></tr><tr><td>tearDown</td><td>每次方法之后执行</td></tr><tr><td>sefUpClass</td><td>类执行前执行</td></tr><tr><td>tearDownClass</td><td>类执行后执行</td></tr><tr><td>Test_XX</td><td>单词在前的case方法，缺少test则不会运行</td></tr></tbody></table></li></ul></li></ul><ul><li><h6 id="断言–assert"><a href="#断言–assert" class="headerlink" title="断言–assert"></a>断言–assert</h6><table><thead><tr><th>Command</th><th>Describe</th></tr></thead><tbody><tr><td>assertEqual</td><td>x == y ？None : z</td></tr><tr><td>assertNotEqual</td><td>x != y ？None : z</td></tr><tr><td>assertTrue</td><td>type(x) == True ? None : z</td></tr></tbody></table></li></ul><ul><li><h6 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h6><p><code>相比类变量更加快捷</code></p><blockquote><p><strong>命名方式</strong>：Globals()[‘变量名’] 解决依赖</p></blockquote></li></ul><ul><li><h6 id="跳过case执行："><a href="#跳过case执行：" class="headerlink" title="跳过case执行："></a>跳过case执行：</h6><blockquote><p><strong>语法糖</strong>：@unittest.skip(‘case’)</p></blockquote></li></ul><ul><li><h6 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h6><blockquote><p><em>创建语法</em></p><pre class=" language-python"><code class="language-python">Suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><em>添加case</em></p><pre class=" language-python"><code class="language-python">Suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>类名<span class="token punctuation">(</span>casename<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><em>可添加多个case</em></p><p><em>执行容器</em></p><pre class=" language-python"><code class="language-python">unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>容器名<span class="token punctuation">)</span></code></pre></blockquote></li></ul><ul><li><h6 id="结合HTMLTestRunner，生成TestReport"><a href="#结合HTMLTestRunner，生成TestReport" class="headerlink" title="结合HTMLTestRunner，生成TestReport"></a>结合HTMLTestRunner，生成TestReport</h6><blockquote><p><em>搜索Python3 HTMLTestRunner，最好是GitHub上面的</em></p><p><em>创建HTMLTestRunner.py，移至Python-&gt;lib目录</em></p><p><em>在case文件中，引入HTMLTestRunner模块</em></p></blockquote></li></ul><ul><li><h6 id="Unittest之面试"><a href="#Unittest之面试" class="headerlink" title="Unittest之面试"></a>Unittest之面试</h6><blockquote><p>如何使用Python开发测试框架</p><blockquote><p>语言：Python</p><p>接口：使用requests第三方库</p><p>管理case：unittest框架-断言-skipcase-suite容器-依赖关系</p><p>报告：HTMLTestRunner</p><p>数据管理：Excel，MySql</p><p>Case执行：持续集成或批处理文件</p></blockquote></blockquote></li></ul><ul><li><h6 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h6><blockquote><p>Unittest中，case是按照ascll码比较，进行升序执行</p><p>尽量减少依赖执行</p><p>GET请求URL与Data分离传参，无响应</p><p>Globals()[‘变量’]  = data 下个case调用会报错 </p></blockquote></li></ul><ul><li><h5 id="Mock服务"><a href="#Mock服务" class="headerlink" title="Mock服务"></a>Mock服务</h5><ul><li><h6 id="以代码来实现自动响应请求的功能，模拟返回数据"><a href="#以代码来实现自动响应请求的功能，模拟返回数据" class="headerlink" title="以代码来实现自动响应请求的功能，模拟返回数据"></a>以代码来实现自动响应请求的功能，模拟返回数据</h6></li><li><h6 id="引入mock"><a href="#引入mock" class="headerlink" title="引入mock"></a>引入mock</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token punctuation">.</span>mock</code></pre></li><li><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><pre class=" language-python"><code class="language-python">mock_name <span class="token operator">=</span> mock<span class="token punctuation">.</span>Mock<span class="token punctuation">(</span>return_value<span class="token operator">=</span>模拟数据<span class="token punctuation">)</span>请求方法 <span class="token operator">=</span>  mock_name<span class="token punctuation">(</span>改变返回模拟数据<span class="token punctuation">)</span></code></pre></li><li><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><pre class=" language-python"><code class="language-python">mock_data <span class="token operator">=</span> mock<span class="token punctuation">.</span>Mock<span class="token punctuation">(</span>return_value<span class="token operator">=</span>response_data<span class="token punctuation">)</span>method <span class="token operator">=</span> mock_datares <span class="token operator">=</span> method<span class="token punctuation">(</span>request_data<span class="token punctuation">,</span> url<span class="token punctuation">,</span> method<span class="token punctuation">)</span></code></pre></li><li><h6 id="重构封装mock"><a href="#重构封装mock" class="headerlink" title="重构封装mock"></a>重构封装mock</h6><pre class=" language-python"><code class="language-python">封装mock<span class="token operator">-</span>method<span class="token keyword">from</span> unittest <span class="token keyword">import</span> mock<span class="token keyword">def</span> <span class="token function">mock_test</span><span class="token punctuation">(</span>mock_method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> request_data<span class="token operator">=</span>None<span class="token punctuation">,</span> response_data<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> response_data <span class="token operator">==</span> None<span class="token punctuation">:</span>        res <span class="token operator">=</span> mock_method<span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> response_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">else</span><span class="token punctuation">:</span>        mock_data <span class="token operator">=</span> mock<span class="token punctuation">.</span>Mock<span class="token punctuation">(</span>return_value<span class="token operator">=</span>response_data<span class="token punctuation">)</span>        mock_method <span class="token operator">=</span> mock_data        res <span class="token operator">=</span> mock_method<span class="token punctuation">(</span>request_data<span class="token punctuation">,</span> url<span class="token punctuation">,</span> method<span class="token punctuation">)</span>        <span class="token keyword">return</span> res</code></pre></li></ul></li></ul><hr><ul><li><h5 id="设计接口自动化测试框架"><a href="#设计接口自动化测试框架" class="headerlink" title="设计接口自动化测试框架"></a>设计接口自动化测试框架</h5><ul><li><h6 id="Case过多，避免繁琐操作"><a href="#Case过多，避免繁琐操作" class="headerlink" title="Case过多，避免繁琐操作"></a>Case过多，避免繁琐操作</h6></li><li><h6 id="不排除某些需求，设定特殊的值，而手动添加"><a href="#不排除某些需求，设定特殊的值，而手动添加" class="headerlink" title="不排除某些需求，设定特殊的值，而手动添加"></a>不排除某些需求，设定特殊的值，而手动添加</h6></li><li><h6 id="编写接口测试用例"><a href="#编写接口测试用例" class="headerlink" title="编写接口测试用例"></a>编写接口测试用例</h6><p><img src="https://i.loli.net/2020/05/14/4GwtTXS5FRcCquj.jpg" alt="用例示范"></p></li><li><h6 id="需要考虑的点"><a href="#需要考虑的点" class="headerlink" title="需要考虑的点"></a>需要考虑的点</h6><blockquote><p>接口地址</p><p>请求数据</p><p>接口类型</p><p>预期结果</p><p>Header - cookie</p><p>数据依赖–接口自动化的难点</p></blockquote></li><li><h6 id="操作Excel"><a href="#操作Excel" class="headerlink" title="操作Excel"></a>操作Excel</h6><blockquote><p>定义一个类</p></blockquote><img src="https://i.loli.net/2020/05/14/O7Kc5nXN3WATsZR.jpg" alt="用例示范" style="zoom:200%;" /> </li><li><h6 id="重构封装excel函数"><a href="#重构封装excel函数" class="headerlink" title="重构封装excel函数"></a>重构封装excel函数</h6><blockquote><p><em>封装request_data, header</em></p><p><em>封装调用类</em></p></blockquote></li><li><h6 id="封装request类"><a href="#封装request类" class="headerlink" title="封装request类"></a>封装request类</h6><blockquote><p>对response_data，进行格式化</p><pre class=" language-python"><code class="language-python">Json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>response<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> intent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>使用ensure_ascii的注意事项：</p><p><em>json_dumps(dict)时，如果dict包含有汉字，一定加上 ensure_ascii=False。否则按参数默认值True，意思是保证dumps之后的结果里所有的字符都能够被 ascii 表示，汉字在ascii的字符集里面，因此经过dumps以后的str里，汉字会变成对应的unicode。</em></p></blockquote></li><li><p>写入excel测试结果</p><blockquote><p>判断接口返回状态：</p><p><em>接口是否通畅</em></p><p>调用status_code方法：</p></blockquote></li><li><p>引入jsonpath_rw 第三方库</p><blockquote><p>从第三方库中引入jsonpath，parse 方法</p><pre class=" language-python"><code class="language-python">B <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'foo'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'baz'</span><span class="token punctuation">:</span> <span class="token string">'news'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'baz'</span><span class="token punctuation">:</span> <span class="token string">'music'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>赋予规则</p><pre class=" language-python"><code class="language-python">A <span class="token operator">=</span> parse<span class="token punctuation">(</span>‘foo<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data’<span class="token punctuation">)</span></code></pre><p>解析数据</p><pre class=" language-python"><code class="language-python">C <span class="token operator">=</span> A<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>使用列表推导式，获取数据</p><pre class=" language-python"><code class="language-python">Data <span class="token operator">=</span> <span class="token punctuation">[</span>match<span class="token punctuation">.</span>value <span class="token keyword">for</span> match <span class="token keyword">in</span> C<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> index get content</code></pre></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Automation InterFace Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础</title>
      <link href="/2020/06/30/Git/basic/"/>
      <url>/2020/06/30/Git/basic/</url>
      
        <content type="html"><![CDATA[<h3 id="一．Git基础"><a href="#一．Git基础" class="headerlink" title="一．Git基础"></a>一．<strong>Git基础</strong></h3><h4 id="1．Git介绍"><a href="#1．Git介绍" class="headerlink" title="1．Git介绍"></a>1．<strong>Git介绍</strong></h4><blockquote><p>Git是目前世界上最先进的分布式版本控制系统</p></blockquote><ul><li>版本控制系统：</li></ul><blockquote><p>记录每个迭代版本的信息</p></blockquote><table><thead><tr><th>版本号</th><th>文件名</th><th>操作用户</th><th>日志</th><th>修改时间</th></tr></thead><tbody><tr><td>1</td><td>Test.py</td><td>well</td><td>修改标题</td><td>2020/04/18/17:15</td></tr><tr><td>2</td><td>Test.py</td><td>jack</td><td>优化性能</td><td>2020/04/18/18:00</td></tr><tr><td>3</td><td>Test.py</td><td>esion</td><td>修复bug</td><td>2020/04/18/19:15</td></tr><tr><td>4</td><td>Test.py</td><td>jack</td><td>功能更新</td><td>2020/04/18/20:15</td></tr></tbody></table><hr><h4 id="2．Git与Github"><a href="#2．Git与Github" class="headerlink" title="2．Git与Github"></a>2．<strong>Git与Github</strong></h4><h6 id="2-1-两者区别"><a href="#2-1-两者区别" class="headerlink" title="2.1.两者区别"></a><strong>2.1.两者区别</strong></h6><ul><li>Git </li></ul><blockquote><p>是一个分布式版本控制系统，简单来说它就是一个软件，用于记录一个或多干个文件迭代信息，以便将来查阅某个版本修订情况的软件</p></blockquote><ul><li>Github </li></ul><blockquote><p>是一个为用户提供Git服务的网站，简单说就是一个可以存放代码的地方，也可以是其他东西，Github除了提供管理Git的Web界面外，还提供了订阅，关注，讨论组，在线编辑器等丰富的功能。 Github被称之为全球最大的基友网站。</p></blockquote><hr><h4 id="3．Git安装"><a href="#3．Git安装" class="headerlink" title="3．Git安装"></a>3．<strong><em>Git安装</em></strong></h4><h6 id="3-1-下载安装包，进行安装"><a href="#3-1-下载安装包，进行安装" class="headerlink" title="3.1.下载安装包，进行安装"></a><strong><em>3.1.下载安装包，进行安装</em></strong></h6><h6 id="3-2-默认安装即可，最后的view就不要勾选了"><a href="#3-2-默认安装即可，最后的view就不要勾选了" class="headerlink" title="3.2.默认安装即可，最后的view就不要勾选了"></a><strong><em>3.2.默认安装即可，最后的view就不要勾选了</em></strong></h6><hr><hr><h3 id="二．Git的使用"><a href="#二．Git的使用" class="headerlink" title="二．Git的使用"></a>二．<strong><em>Git的使用</em></strong></h3><h4 id="1．本地仓库"><a href="#1．本地仓库" class="headerlink" title="1．本地仓库"></a>1．<strong><em>本地仓库</em></strong></h4><h6 id="1-1-工作流程"><a href="#1-1-工作流程" class="headerlink" title="1.1. 工作流程"></a><strong>1.1.</strong> <strong><em>工作流程</em></strong></h6><ul><li>Git本地操作的三个区域-&gt;示意图：</li></ul><p><img src="https://i.loli.net/2020/05/14/pAbHg8SUZWqTkL6.jpg" alt=""> </p><ul><li>工作流程-&gt;示意图：</li></ul><p><img src="https://i.loli.net/2020/05/14/qlN3yrPaQ8kc56F.jpg" alt=""> </p><h6 id="1-2-本地仓库操作"><a href="#1-2-本地仓库操作" class="headerlink" title="1.2.本地仓库操作"></a>1.2.<strong>本地仓库操作</strong></h6><blockquote><p>什么是仓库呢？仓库又名为版本库，英文名repository，可以简单的理解成是一个目录，<br>用于存放代码，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，<br>删除等变更状态Git都能跟踪到。</p></blockquote><ul><li>在安装好后首次使用需要进行全局配置,进入Git bash here 进入Git命令行窗口，输入以下命令：</li></ul><pre><code>Config --global user.name “xxx”  配置用户名Config --global user.email “xxx”  配置邮箱</code></pre><blockquote><p>在多人协作项目中，用于身份的甄别</p></blockquote><ul><li>创建仓库</li></ul><blockquote><p>当我们需要让Git去管理某个新项目/已存在的项目，就需要创建仓库了。<br>注意，创建仓库的目录不一定要求是空目录，选择一个非空目录也是可以的，<br>但是不建议在现有的项目上来学习Git。</p></blockquote><ul><li>创建空目录</li></ul><pre><code>Mkdir file_name</code></pre><ul><li><p>进入目录</p></li><li><p>Git仓库初始化</p></li></ul><pre><code>Git init</code></pre><blockquote><p>生成git的隐式目录</p></blockquote><h6 id="1-3-Git常用指令"><a href="#1-3-Git常用指令" class="headerlink" title="1.3. \Git常用指令**"></a><strong>1.3.</strong> <strong><em>\</em>Git常用指令**</strong></h6><ul><li>查看当前状态</li></ul><pre><code>git status</code></pre><ul><li><p>添加至缓存区</p><p><em>添加一个文件</em></p><pre><code>git add file_name</code></pre><p><em>添加多个文件</em></p><pre><code>git add file_1 file_2 file_3</code></pre><p><em>添加全部文件</em></p><pre><code>git add .</code></pre></li></ul><ul><li><p>移除缓存区文件</p><p><em>移出一个文件</em></p><pre><code>git rm -r --cached file_name</code></pre><p><em>移出多个文件</em></p><pre><code>git rm -r --cached .</code></pre><p><em>移出全部文件</em></p><pre><code>git rm -r --cached .idea</code></pre></li></ul><ul><li><p>提交至版本库</p><pre><code>git commit -m “更新内容描述”</code></pre></li></ul><hr><h6 id="1-4-版本回退"><a href="#1-4-版本回退" class="headerlink" title="1.4.版本回退"></a>1.4.<strong><em>版本回退</em></strong></h6><ul><li><p>查看版本，确定需要回到的时间点</p></li><li><p>版本号仅会显示当前，以及当前以前的版本信息</p></li></ul><blockquote><p>commit bc22b1d47fe55db8901129da1f6c74fdbbddd5b8 (HEAD -&gt; master) 目前版本</p></blockquote><ul><li><p>获得详细版本状态信息</p><pre><code>git log</code></pre></li><li><p>获得版本提交编号，与注释内容，一行显示</p><pre><code>git log --pretty=oneline</code></pre></li><li><p>回退</p><pre><code>git reset --hard 版本号</code></pre></li><li><p>回退至历史版本后，在回退到当前，则需要查看历史操作，得到想要commit_id</p><pre><code>git reflog</code></pre></li></ul><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><ul><li><p>回退各个时间段的版本，需获得commit id，进行 git reset –hard commit_id</p></li><li><p>再次回到当前版本，需要进行reflog直接获得历史操作，以及获得7位commit_id</p></li><li><p>commit_id可以不用输入完整，git会自动识别，但也不能太少，可能会出现重复，至少写前4位字符</p></li></ul><p>1.5. <strong>忽略文件</strong></p><ul><li>应用场景</li></ul><blockquote><p>在项目目录下有很多万年不变的文件目录，例如css，js，images等，<br>或者还有一些目录即便有改动，我们也不想让其提交到线上仓库。</p></blockquote><ul><li>实现流程</li></ul><blockquote><p>忽略文件需要新建一个名为.gitignore的规则文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录与子目录生效</p></blockquote><p><em>注意：该文件没有文件名，没办法直接在windows目录下创建，可以通过命令行创建。</em></p><table><thead><tr><th>常见规则</th><th></th></tr></thead><tbody><tr><td><em>过滤整个子目录</em></td><td>/mtk</td></tr><tr><td><em>过滤当前目录与子目录中.zip文件</em></td><td>*.zip</td></tr><tr><td><em>过滤具体文件</em></td><td>/mtk/.doc</td></tr><tr><td><em>不过滤该文件</em></td><td>! Test.py</td></tr></tbody></table><ul><li><p>创建过滤文件</p><pre><code>touch .gitignore</code></pre></li></ul><h4 id="2-远程仓库"><a href="#2-远程仓库" class="headerlink" title="2.远程仓库"></a>2.<strong>远程仓库</strong></h4><p><code>线上仓库的操作学习以GIthub为例</code></p><h6 id="线上仓库创建，两种常规使用方式"><a href="#线上仓库创建，两种常规使用方式" class="headerlink" title="线上仓库创建，两种常规使用方式"></a>线上仓库创建，两种常规使用方式</h6><ul><li><p>基于http协议</p><ol><li><p><code>创建空目录，名称就称为WellHome</code></p><pre><code>Mkdir WellHome</code></pre></li><li><p><code>使用clone指令，克隆线上仓库到本地</code></p><pre><code>git clone source.git</code></pre></li><li><p><code>仓库基本操作（提交暂存区，提交本地仓库，提交线上仓库，拉取线上仓库）</code></p><p>提交当线上仓库的指令</p><p><em>git push</em></p><p>若提交后，返回requested 403 因为需要鉴权，则需要权限</p><p><em>需要修改配置文件，在请求url 中添加用户名与密码</em></p></li><li><p>拉取线上仓库</p><p>git pull</p></li></ol></li></ul><blockquote><p>在每天工作的第一件事</p><p><em>git pull</em> </p><p>每天下班时做的最后一件事</p><p><em>git push</em></p></blockquote><ul><li><p>基于SSH协议</p><p><code>需安装OpenSSH（推荐使用）</code></p></li></ul><blockquote><p>Https与SSH协议区别：该方式与前面https方式相比，至少影响github对于用户的身份鉴权方式，对于git    的具体操作（如提交本地，添加注释，提交远程等操作）没有任何影响</p></blockquote><ul><li><p>生成公私钥对指令（需自行安装OpenSSH）</p><p><em>ssh-keygen -t rsa -C “注册邮箱”，直接回车继续，返回提示生成的公私钥对的路径</em></p></li><li><p>进入提示目录下，找到公钥文件，添加到github中，并编写title</p></li><li><p>clone 仓库</p><p><em>git clone  git_ssh地址 — 返回提示yes or no 输入yes即可</em></p></li></ul><h6 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h6><ul><li>分支示意图</li></ul><p><img src="https://i.loli.net/2020/05/14/oe5Vhbg8pRmHsGA.jpg" alt=""> </p><blockquote><p>​    在版本回退的操作中，每次提交后都会有记录，Git把它们串成时间线，形成类型时间轴的存在，这个时间轴就是一个分支，我们称为master分支（主分支）。<br>​    在多人团队协作开发的项目中，一个分支是无法满足多人同时开发的需求的，并且分支上工作并不影响他人正常使用，会更加安全，Git鼓励开发者使用分支去完成开发任务。</p></blockquote><table><thead><tr><th>分支相关指令</th><th></th></tr></thead><tbody><tr><td>查看分支</td><td>git branch</td></tr><tr><td>创建分支</td><td>git branch 名称</td></tr><tr><td>切换分支</td><td>git checkout 名称</td></tr><tr><td>删除分支</td><td>git branch -d 名称</td></tr><tr><td>合并分支</td><td>git merge 被合并名称</td></tr></tbody></table><h6 id="冲突的产生与解决"><a href="#冲突的产生与解决" class="headerlink" title="冲突的产生与解决"></a>冲突的产生与解决</h6><blockquote><p>当线上与本地仓内容不一致时，git会检测出来，并提示让你先pull<br>Pull后，git会自动合并代码在改文件中。</p></blockquote><ul><li><p>解决方法</p><p><em>与变更文件同事沟通，再进行操作</em></p></li><li><p>提醒</p><p><em>上班后同步线上代码</em></p></li></ul><h6 id="图形化管理工具"><a href="#图形化管理工具" class="headerlink" title="图形化管理工具"></a>图形化管理工具</h6><ul><li><p>Github for Desktop</p><p><u>Github出品，功能完善，界面简洁，使用方便。</u></p></li><li><p>Source tree</p><p><u>老牌Git GUI管理工具，也号称最好用的管理工具，功能丰富，基本操作和高级操作都非常流畅，适合初学者。</u></p></li><li><p>TortoiseGit</p><p><u>对于熟悉SVN的开发人员来说，这个小乌龟是非常友善了，简称tgit，中文名海龟Git，</u></p><p><u>它与前辈TortoiseSVN都是非常优秀的开源版本控制客户端软件。</u></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
            <tag> Learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2020/06/28/MySQL/basic/"/>
      <url>/2020/06/28/MySQL/basic/</url>
      
        <content type="html"><![CDATA[<h4 id="查看库，表，内容"><a href="#查看库，表，内容" class="headerlink" title="查看库，表，内容"></a>查看库，表，内容</h4><ul><li><p>查看MySQL版本号 </p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>V  <span class="token operator">or</span> mysql <span class="token comment" spellcheck="true">--version</span></code></pre></li><li><p>查看当前所有库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre></li><li><p>进入数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> db_name<span class="token punctuation">;</span></code></pre></li><li><p>查看当前所有表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token keyword">from</span> db_name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 查看指定库的表</span></code></pre></li><li><p>查看表内容</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>创建表，以及字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span>Id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 字段|类型</span>Name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true"># 字段|类型</span></code></pre></li><li><p>查看所在库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查看表结构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DESC</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> “mack”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> name<span class="token operator">=</span>”jack” <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>删除表数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li></ul><hr><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><ul><li><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> field <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre><blockquote><p>特点：查询列表可以是：表中的字段，常量值，表达式，函数</p></blockquote></li><li><p>查询表中的单个字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> field1 <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>查询表中多个字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> field1<span class="token punctuation">,</span> field2 <span class="token keyword">from</span> table_name<span class="token punctuation">;</span> </code></pre></li><li><p>查询表中所有字段 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>区分关键字与字段</p><blockquote><p>字段名前后加入 ` 符号</p></blockquote></li><li><p>查询常量值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> ‘<span class="token keyword">join</span>’<span class="token punctuation">;</span></code></pre></li><li><p>查询表达式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span></code></pre></li><li><p>查询函</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 调用version函数返回版本号</code></pre></li></ul><ul><li><p>赋予别名，改变字段名称</p><ol><li><p>利于理解</p></li><li><p>如果查询的字段存在重名，使用别名可以进行区分<br>方法一</p><pre><code>Select version() as one;</code></pre></li></ol></li></ul><pre><code> 方法二 ``` select version() one; select version() “one pic”; ```</code></pre><ul><li><p>+号的作用</p><ol><li><p>加法运算</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> ‘<span class="token keyword">join</span>’ <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>  输出结果：<span class="token number">100</span></code></pre></li></ol></li></ul><ol start="2"><li><p>其中一方为字符串，则转换类型，转换失败则置0处理</p></li><li><p>若一方为Null，则结果为Null</p></li></ol><ul><li><p><strong>DISTINCT</strong>-去重</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> DICTINCT 字段名 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p><strong>CONCAT</strong>-连接查询字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>field1<span class="token punctuation">,</span> ‘<span class="token punctuation">,</span>’ field2<span class="token punctuation">)</span> <span class="token keyword">as</span> 列名 <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p><strong>IFNULL</strong>-判空函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span></code></pre><blockquote><p>第一个参数为Null，则替换为第二个参数</p></blockquote></li></ul><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><blockquote><p>Select 查询字段 from 表名 where 筛选条件;</p></blockquote></li><li><h6 id="按条件表达式筛选"><a href="#按条件表达式筛选" class="headerlink" title="按条件表达式筛选"></a>按条件表达式筛选</h6><p><strong>条件运算符：&gt; &lt; &gt;= &lt;= != &lt;&gt; =</strong></p><ul><li><p>案例1：查询工资&gt;12000的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name W salary <span class="token operator">></span> <span class="token number">12000</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li><p>案例2：查询部分编号!=90的员工名和部门编号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> department_id<span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department <span class="token operator">&lt;></span> <span class="token number">90</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><h6 id="按逻辑表达式筛选"><a href="#按逻辑表达式筛选" class="headerlink" title="按逻辑表达式筛选"></a>按逻辑表达式筛选</h6><p><strong>逻辑运算符：And or not</strong></p><ul><li><p>案例1：查询工资在10000到20000之间的员工名，工资，奖金信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> commission_pct<span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token number">10000</span> <span class="token operator">AND</span> salary <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li><p>案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">></span> <span class="token number">110</span> <span class="token operator">OR</span> department_id <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token operator">OR</span> salary <span class="token operator">></span> <span class="token number">15000</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为 &gt;110 与 &lt;90条件不冲突，以及salary字段&gt;15000最后才执行</p></blockquote></li></ul><ul><li><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p><strong>关键字：like，between and，in，is null</strong></p><p><em>like：一般和通配符配合使用</em></p><ul><li><p>案例1：查询员工名中包含字符a的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">From</span> employees<span class="token keyword">Where</span> last_name <span class="token operator">like</span> ‘<span class="token operator">%</span><span class="token number">a</span><span class="token operator">%</span>’<span class="token punctuation">;</span></code></pre><blockquote><p>字符串必须使用单引号，%代表通配符，任意字符，包含0个字符</p></blockquote></li></ul></li></ul><hr><hr><h4 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h4><h6 id="Mysql报错1366"><a href="#Mysql报错1366" class="headerlink" title="Mysql报错1366"></a>Mysql报错1366</h6><ul><li>解决方案：修改此表的字符集</li><li>分别操作：查看表中每个字段的字符集，修改表中的字段的字符集</li><li>查看表结构：show full columns from 表名;</li><li>改变表结构：alter table 表名 convert to character set utf8;</li></ul><h6 id="创建用户和授权"><a href="#创建用户和授权" class="headerlink" title="创建用户和授权"></a>创建用户和授权</h6><p>在mysql8.0创建用户和授权和之前不太一样了，其实严格上来讲，也不能说是不一样,只能说是更严格,mysql8.0需要先创建用户和设置密码,然后才能授权.</p><ol><li><p>先创建一个用户</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'tone'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123123</span>'<span class="token punctuation">;</span></code></pre></li><li><p>进行授权</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'tone'</span><span class="token variable">@'%'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span></code></pre></li><li><p>如果还是用原来5.7的那种方式，会报错误：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'tome'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123123</span>'<span class="token punctuation">;</span></code></pre><p>抛出错误：</p><pre><code>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds toyour MySQL server version for the right syntax to use near &#39;identified by &#39;123123&#39;&#39; at line 1</code></pre></li></ol><h6 id="MySQL8-0-的远程链接"><a href="#MySQL8-0-的远程链接" class="headerlink" title="MySQL8.0 的远程链接"></a>MySQL8.0 的远程链接</h6><p>MySQL 安装完成后只支持 localhost 访问，我们必须设置一下才可以远程访问，另外还有一些 MySQL 8.0 连接时的一些问题.</p><ul><li><p>登录MySQL</p><pre class=" language-mysql"><code class="language-mysql">mysql -u root -p</code></pre></li></ul><ul><li><p>输入您的密码，选择 mysql 数据库</p><pre class=" language-mysql"><code class="language-mysql">use mysql;</code></pre></li></ul><ul><li><p>因为 mysql 数据库中存储了用户信息的 user 表，在 mysql 数据库的 user 表中查看当前 root 用户的相关信息</p><pre class=" language-mysql"><code class="language-mysql">select host, user, authentication_string, plugin from user; </code></pre></li></ul><ul><li><p>执行完上面的命令后会显示一个表格，<br>查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。<br>授权 root 用户的所有权限并设置远程访问</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>GRANT ALL ON 表示所有权限，% 表示通配所有 host，可以访问远程。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span>你自己的密码'<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>刷新权限所有操作后，应执行</p><pre class=" language-mysql"><code class="language-mysql">flush privileges;</code></pre></li></ul><ul><li><p>查看 root 用户的 host</p><pre class=" language-mysql"><code class="language-mysql">use mysql;select host, user, authentication_string, plugin from user;</code></pre></li></ul><ul><li><p>发现 root 用户的 host 已经变成 %，说明我们的修改已经成功，可以远程访问了。</p></li><li><p>访问数据库</p><blockquote><p>远程访问数据库的GUI工具比较多如：Navicat、SQLyog、MySQL workbench 等，我这里使用 Navicat</p></blockquote></li><li><p>输入访问的 host 和密码，报 2059 错误，这是因为 MySql8.0 版本 和 5.7 的加密规则不一样，而现在的可视化工具只支持旧的加密方式。</p></li></ul><blockquote><p>出现这个原因是mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password.<br>解决问题方法有两种,一种是升级navicat驱动,一种是把mysql用户登录密码加密规则还原成mysql_native_password.</p></blockquote><p>​        这里采用第二种方式 ：</p><p>​        修改加密规则:</p><pre class=" language-mysql"><code class="language-mysql">ALTER USER 'root'@'%' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; password 为你当前密码。</code></pre><p>​        更新 root 用户密码:</p><pre class=" language-mysql"><code class="language-mysql">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; password 为你新设置的密码。</code></pre><p>​        刷新权限:</p><pre class=" language-mysql"><code class="language-mysql">FLUSH PRIVILEGES; </code></pre><p>​        OK，设置完成，再次使用 Navicat 连接数据库</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Settings</title>
      <link href="/2020/06/28/Python/crawler/lagou/Settings/"/>
      <url>/2020/06/28/Python/crawler/lagou/Settings/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="COOKIES-ENABLED"><a href="#COOKIES-ENABLED" class="headerlink" title="COOKIES_ENABLED"></a>COOKIES_ENABLED</h4><p> 进入 scrapy 包 -&gt; downloadermiddlewares 子包 -&gt; cookies模块中</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CookiesMiddleware</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""This middleware enables working with sites that need cookies"""</span>    <span class="token comment" spellcheck="true"># 使用该中间件可以处理需要Cookie的网站</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>jars <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>CookieJar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>debug <span class="token operator">=</span> debug    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这是一个组件，作用于所有的scrapy Request</span>        <span class="token comment" spellcheck="true"># 通过这个组件，提取前一个Request中的cookie，并加入下一个Request cookie中去</span>        <span class="token keyword">if</span> <span class="token operator">not</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getbool<span class="token punctuation">(</span><span class="token string">'COOKIES_ENABLED'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotConfigured        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getbool<span class="token punctuation">(</span><span class="token string">'COOKIES_DEBUG'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'dont_merge_cookies'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span></code></pre></li></ul><hr><hr><ul><li><h4 id="USER-AGENT"><a href="#USER-AGENT" class="headerlink" title="USER_AGENT"></a>USER_AGENT</h4><p>设置全局USER_AGENT，与DOWNLOADERMIDDLEWARES 配合</p><pre><code>USER_AGENT = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&#39;</code></pre></li></ul><ul><li><h4 id="DOWNLOADER-MIDDLEWARES"><a href="#DOWNLOADER-MIDDLEWARES" class="headerlink" title="DOWNLOADER_MIDDLEWARES"></a>DOWNLOADER_MIDDLEWARES</h4><p> 赋予每个Scrapy Request USER-AGENT</p><pre><code>DOWNLOADER_MIDDLEWARES = {#    &#39;ArticleSpider.middlewares.ArticlespiderDownloaderMiddleware&#39;: 543,    &#39;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&#39;: 2}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
            <tag> Lagou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CrawlSpider code</title>
      <link href="/2020/06/28/Python/crawler/lagou/CrawlSpider%20code/"/>
      <url>/2020/06/28/Python/crawler/lagou/CrawlSpider%20code/</url>
      
        <content type="html"><![CDATA[<h2 id="查看可用-scrapy-模板"><a href="#查看可用-scrapy-模板" class="headerlink" title="查看可用 scrapy 模板"></a>查看可用 scrapy 模板</h2><ul><li><h4 id="进入项目目录，输入以下命令"><a href="#进入项目目录，输入以下命令" class="headerlink" title="进入项目目录，输入以下命令"></a>进入项目目录，输入以下命令</h4><pre><code>scrapy genspider --list</code></pre><hr></li><li><h4 id="可用模板列表"><a href="#可用模板列表" class="headerlink" title="可用模板列表"></a>可用模板列表</h4><pre class=" language-python"><code class="language-python">Available templates<span class="token punctuation">:</span>  basic          <span class="token comment" spellcheck="true"># 默认模板</span>  crawl          <span class="token comment" spellcheck="true"># 全站爬取</span>  csvfeed      <span class="token comment" spellcheck="true"># CSV 源模板</span>  xmlfeed      <span class="token comment" spellcheck="true"># XML 源模板</span></code></pre><hr></li><li><h6 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h6></li></ul><ul><li><h6 id="crawl"><a href="#crawl" class="headerlink" title="crawl"></a>crawl</h6><p>CrawlSpider 是爬取那些具有一定规则网站的常用的爬虫，它基于Spider并有一些独特属性</p><ul><li><p>基于 Spider 类，进一步封装</p></li><li><p>rules: 是Rule 对象的集合，用于匹配目标网站并排除干扰</p></li><li><p>parse_start_url: 用于爬取起始响应，必须要返回item，Request中的一个</p></li><li><p>_parse_response: 是CrawlSpider 的核心方法</p></li></ul><blockquote><p><em>创建CrawlSpider</em></p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span> <span class="token operator">></span> scrapy genspider <span class="token operator">-</span>t crawl spider_name spider_url</code></pre></blockquote><p><strong>注意：在CrawlSpider中，不可以进行重构 parse 方法，因为它已经被CrawlSpider占用，可以使用parse_strat_url方法替代</strong></p></li><li><h6 id="csvfeed"><a href="#csvfeed" class="headerlink" title="csvfeed"></a>csvfeed</h6></li></ul><ul><li><h6 id="xmlfeed"><a href="#xmlfeed" class="headerlink" title="xmlfeed"></a>xmlfeed</h6></li></ul><hr><hr><ul><li><h4 id="添加-source-root-gt-settings-配置中"><a href="#添加-source-root-gt-settings-配置中" class="headerlink" title="添加 source root -&gt; settings 配置中"></a>添加 source root -&gt; settings 配置中</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加所属目录 -> PythonPath 中</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><h4 id="CrawlSpider-源码逻辑概述"><a href="#CrawlSpider-源码逻辑概述" class="headerlink" title="CrawlSpider 源码逻辑概述"></a>CrawlSpider 源码逻辑概述</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LagouSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'lagou'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.lagou.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.lagou.com/'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment" spellcheck="true"># 参数为可迭代对象</span>        <span class="token comment" spellcheck="true"># rule 实例，LinkExtractor (链接提取器) 实例</span>        <span class="token comment" spellcheck="true"># 可以更改域名,  一般大型网站都有负载均衡处理, 在某个城市进行CDN, 每个城市的URL/IP地址都是不一样的, 获取到多个城市的URL后,可以进行随机IP访问，减少了IP被检测的概率</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span>r<span class="token string">'Items/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_job</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""解析拉勾网职位信息"""</span>        item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span>        <span class="token comment" spellcheck="true">#item['name'] = response.xpath('//div[@id="name"]').get()</span>        <span class="token comment" spellcheck="true">#item['description'] = response.xpath('//div[@id="description"]').get()</span>        <span class="token keyword">return</span> item<span class="token keyword">class</span> <span class="token class-name">CrawlSpider</span><span class="token punctuation">(</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在 CrawlSpider 初始化时, 调用 compile_rules 方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_compile_rules<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_parse_response<span class="token punctuation">(</span>response<span class="token punctuation">,</span> self<span class="token punctuation">.</span>parse_start_url<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_start_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">process_results</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> results    <span class="token keyword">def</span> <span class="token function">_build_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rule_index<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Request<span class="token punctuation">(</span>            url<span class="token operator">=</span>link<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            callback<span class="token operator">=</span>self<span class="token punctuation">.</span>_callback<span class="token punctuation">,</span>            errback<span class="token operator">=</span>self<span class="token punctuation">.</span>_errback<span class="token punctuation">,</span>            meta<span class="token operator">=</span>dict<span class="token punctuation">(</span>rule<span class="token operator">=</span>rule_index<span class="token punctuation">,</span> link_text<span class="token operator">=</span>link<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_requests_to_follow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""要求遵循"""</span>        <span class="token comment" spellcheck="true"># 判断是否为 HTMLResponse</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>response<span class="token punctuation">,</span> HtmlResponse<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 新建一个 set 类型局部变量, 对 response 中的 url 进行去重</span>        seen <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通过 enumerate 把 _rules 改变为一个可迭代的对象</span>        <span class="token keyword">for</span> rule_index<span class="token punctuation">,</span> rule <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_rules<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 把 response 传递给 link_extractor 类 extract_links 方法, 提取出具体的 link</span>            links <span class="token operator">=</span> <span class="token punctuation">[</span>lnk <span class="token keyword">for</span> lnk <span class="token keyword">in</span> rule<span class="token punctuation">.</span>link_extractor<span class="token punctuation">.</span>extract_links<span class="token punctuation">(</span>response<span class="token punctuation">)</span>                     <span class="token keyword">if</span> lnk <span class="token operator">not</span> <span class="token keyword">in</span> seen<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 自定义 process_links 方法, 传递给 Rule 类, 抽取出 link 添加至 set 中</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> rule<span class="token punctuation">.</span>process_links<span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">:</span>                seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>link<span class="token punctuation">)</span>                request <span class="token operator">=</span> self<span class="token punctuation">.</span>_build_request<span class="token punctuation">(</span>rule_index<span class="token punctuation">,</span> link<span class="token punctuation">)</span>                <span class="token keyword">yield</span> rule<span class="token punctuation">.</span>_process_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        rule <span class="token operator">=</span> self<span class="token punctuation">.</span>_rules<span class="token punctuation">[</span>response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'rule'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_parse_response<span class="token punctuation">(</span>response<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>callback<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>cb_kwargs<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>follow<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_errback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">:</span>        rule <span class="token operator">=</span> self<span class="token punctuation">.</span>_rules<span class="token punctuation">[</span>failure<span class="token punctuation">.</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'rule'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_handle_failure<span class="token punctuation">(</span>failure<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>errback<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_parse_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> cb_kwargs<span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        CrawlSpider 中核心方法        :param response:        :param callback: 回调方法名 self.parse_start_url        :param cb_kwargs: 获取 parse_start_url 返回的参数        :param follow:        :return:        """</span>        <span class="token keyword">if</span> callback<span class="token punctuation">:</span>            cb_res <span class="token operator">=</span> callback<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token operator">**</span>cb_kwargs<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 交由 process_results 方法</span>            cb_res <span class="token operator">=</span> self<span class="token punctuation">.</span>process_results<span class="token punctuation">(</span>response<span class="token punctuation">,</span> cb_res<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对返回结果，进行迭代(抛出 Item，交给 Scrapy 进行传递)</span>            <span class="token keyword">for</span> request_or_item <span class="token keyword">in</span> iterate_spider_output<span class="token punctuation">(</span>cb_res<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> request_or_item        <span class="token comment" spellcheck="true"># CrawlSpider 核心中的核心, 默认进行跟随链接, 改变follow/_follow_links bool 值, 决定是否跟随</span>        <span class="token keyword">if</span> follow <span class="token operator">and</span> self<span class="token punctuation">.</span>_follow_links<span class="token punctuation">:</span>            <span class="token keyword">for</span> request_or_item <span class="token keyword">in</span> self<span class="token punctuation">.</span>_requests_to_follow<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> request_or_item    <span class="token keyword">def</span> <span class="token function">_handle_failure</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> failure<span class="token punctuation">,</span> errback<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> errback<span class="token punctuation">:</span>            results <span class="token operator">=</span> errback<span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> request_or_item <span class="token keyword">in</span> iterate_spider_output<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> request_or_item    <span class="token keyword">def</span> <span class="token function">_compile_rules</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""制定规则"""</span>        <span class="token comment" spellcheck="true"># 生成实例变量</span>        self<span class="token punctuation">.</span>_rules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> rule <span class="token keyword">in</span> self<span class="token punctuation">.</span>rules<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 浅拷贝 rule 值</span>            self<span class="token punctuation">.</span>_rules<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_rules<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_compile<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        spider <span class="token operator">=</span> super<span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>from_crawler<span class="token punctuation">(</span>crawler<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取 settings 中 'CRAWLSPIDER_FOLLOW_LINKS' 参数 (需自定义)，若没定义则取默认值 True</span>        <span class="token comment" spellcheck="true"># 若设置 'CRAWLSPIDER_FOLLOW_LINKS' 参数为False，rules 则会失效</span>        spider<span class="token punctuation">.</span>_follow_links <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getbool<span class="token punctuation">(</span><span class="token string">'CRAWLSPIDER_FOLLOW_LINKS'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> spider</code></pre><hr></li></ul><ul><li><h4 id="Rule-类"><a href="#Rule-类" class="headerlink" title="Rule 类"></a>Rule 类</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rule</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token operator">=</span>None<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> follow<span class="token operator">=</span>None<span class="token punctuation">,</span>                 process_links<span class="token operator">=</span>None<span class="token punctuation">,</span> process_request<span class="token operator">=</span>None<span class="token punctuation">,</span> errback<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor <span class="token operator">or</span> _default_link_extractor        self<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback        self<span class="token punctuation">.</span>errback <span class="token operator">=</span> errback        self<span class="token punctuation">.</span>cb_kwargs <span class="token operator">=</span> cb_kwargs <span class="token operator">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>process_links <span class="token operator">=</span> process_links <span class="token operator">or</span> _identity        self<span class="token punctuation">.</span>process_request <span class="token operator">=</span> process_request <span class="token operator">or</span> _identity_process_request        self<span class="token punctuation">.</span>process_request_argcount <span class="token operator">=</span> None        self<span class="token punctuation">.</span>follow <span class="token operator">=</span> follow <span class="token keyword">if</span> follow <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> <span class="token operator">not</span> callback</code></pre><ul><li>link_extractor                                       一个具体的 extractor 类，用于完成 url 的抽取</li><li>callback                                               回调函数</li><li>cb_kwargs                                           传递给 link_extractor 的参数</li><li>follow                                                   满足 rule 的 url 是否进行跟踪</li><li>process_links                                       可以自定义的预处理方法   <em>参数类型 -&gt; function</em></li><li>process_request                                  对 request 进行处理           <em>参数类型 -&gt; function</em></li></ul><hr></li></ul><ul><li><h4 id="LinkExtractor-类"><a href="#LinkExtractor-类" class="headerlink" title="LinkExtractor 类"></a>LinkExtractor 类</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LxmlLinkExtractor</span><span class="token punctuation">(</span>FilteringLinkExtractor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> allow<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> restrict_xpaths<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 tags<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> canonicalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> process_value<span class="token operator">=</span>None<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>None<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 strip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> restrict_text<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags<span class="token punctuation">,</span> attrs <span class="token operator">=</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">)</span>        lx <span class="token operator">=</span> LxmlParserLinkExtractor<span class="token punctuation">(</span>            tag<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">in</span> tags<span class="token punctuation">,</span>            attr<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">in</span> attrs<span class="token punctuation">,</span>            unique<span class="token operator">=</span>unique<span class="token punctuation">,</span>            process<span class="token operator">=</span>process_value<span class="token punctuation">,</span>            strip<span class="token operator">=</span>strip<span class="token punctuation">,</span>            canonicalized<span class="token operator">=</span>canonicalize        <span class="token punctuation">)</span>        super<span class="token punctuation">(</span>LxmlLinkExtractor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>lx<span class="token punctuation">,</span> allow<span class="token operator">=</span>allow<span class="token punctuation">,</span> deny<span class="token operator">=</span>deny<span class="token punctuation">,</span>                                                allow_domains<span class="token operator">=</span>allow_domains<span class="token punctuation">,</span> deny_domains<span class="token operator">=</span>deny_domains<span class="token punctuation">,</span>                                                restrict_xpaths<span class="token operator">=</span>restrict_xpaths<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span>restrict_css<span class="token punctuation">,</span>                                                canonicalize<span class="token operator">=</span>canonicalize<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>deny_extensions<span class="token punctuation">,</span>                                                restrict_text<span class="token operator">=</span>restrict_text<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">extract_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Returns a list of :class:`~scrapy.link.Link` objects from the        specified :class:`response &lt;scrapy.http.Response>`.        Only links that match the settings passed to the ``__init__`` method of        the link extractor are returned.        Duplicate links are omitted.        """</span>        base_url <span class="token operator">=</span> get_base_url<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>restrict_xpaths<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 编译 xpath 参数</span>            docs <span class="token operator">=</span> <span class="token punctuation">[</span>subdoc                    <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>restrict_xpaths                    <span class="token keyword">for</span> subdoc <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            docs <span class="token operator">=</span> <span class="token punctuation">[</span>response<span class="token punctuation">.</span>selector<span class="token punctuation">]</span>        all_links <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> doc <span class="token keyword">in</span> docs<span class="token punctuation">:</span>            links <span class="token operator">=</span> self<span class="token punctuation">.</span>_extract_links<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>encoding<span class="token punctuation">,</span> base_url<span class="token punctuation">)</span>            all_links<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_process_links<span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> unique_list<span class="token punctuation">(</span>all_links<span class="token punctuation">)</span></code></pre><ul><li><p>allow                                                       正则提取，设定的 rules allow 参数，进行处理</p></li><li><p>deny                                                       正则提取，设定的 rules allow 参数，不处理</p></li><li><p>allow_domains                                       设定域名下的 url，进行处理</p></li><li><p>deny_domains                                        设定域名下的 url，不处理</p></li><li><p>restrict_xpaths                                        指定 xpath 规则，进行提取</p></li><li><p>tags                                                         默认提取标签 a, area  </p></li><li><p>attrs (attribute)                                        默认提取 href 属性中的值              </p></li><li><p>restrict_css                                             指定 css 规则，进行提取    <em>(最终都会被转换为 xpath 进行处理)</em></p><p>Ps：css 语法是 HTML 支持的， XML 是不支持的，最早 Xpath 是用来提取 XML 的</p></li></ul></li></ul><ul><li><h4 id="父类-FilteringLinkExtractor"><a href="#父类-FilteringLinkExtractor" class="headerlink" title="父类 FilteringLinkExtractor"></a>父类 FilteringLinkExtractor</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FilteringLinkExtractor</span><span class="token punctuation">:</span>    _csstranslator <span class="token operator">=</span> HTMLTranslator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors<span class="token punctuation">.</span>lxmlhtml <span class="token keyword">import</span> LxmlLinkExtractor        <span class="token keyword">if</span> <span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> FilteringLinkExtractor<span class="token punctuation">)</span> <span class="token operator">and</span>                <span class="token operator">not</span> issubclass<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> LxmlLinkExtractor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            warn<span class="token punctuation">(</span><span class="token string">'scrapy.linkextractors.FilteringLinkExtractor is deprecated, '</span>                 <span class="token string">'please use scrapy.linkextractors.LinkExtractor instead'</span><span class="token punctuation">,</span>                 ScrapyDeprecationWarning<span class="token punctuation">,</span> stacklevel<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span>FilteringLinkExtractor<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token punctuation">,</span> allow<span class="token punctuation">,</span> deny<span class="token punctuation">,</span> allow_domains<span class="token punctuation">,</span> deny_domains<span class="token punctuation">,</span>                 restrict_xpaths<span class="token punctuation">,</span> canonicalize<span class="token punctuation">,</span> deny_extensions<span class="token punctuation">,</span> restrict_css<span class="token punctuation">,</span> restrict_text<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor        self<span class="token punctuation">.</span>allow_res <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _re_type<span class="token punctuation">)</span> <span class="token keyword">else</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>allow<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>deny_res <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _re_type<span class="token punctuation">)</span> <span class="token keyword">else</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                         <span class="token keyword">for</span> x <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>deny<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>allow_domains <span class="token operator">=</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>allow_domains<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>deny_domains <span class="token operator">=</span> set<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>deny_domains<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>restrict_xpaths <span class="token operator">=</span> tuple<span class="token punctuation">(</span>arg_to_iter<span class="token punctuation">(</span>restrict_xpaths<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>restrict_xpaths <span class="token operator">+=</span> tuple<span class="token punctuation">(</span>map<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_csstranslator<span class="token punctuation">.</span>css_to_xpath<span class="token punctuation">,</span>                                          arg_to_iter<span class="token punctuation">(</span>restrict_css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>canonicalize <span class="token operator">=</span> canonicalize        <span class="token keyword">if</span> deny_extensions <span class="token keyword">is</span> None<span class="token punctuation">:</span>            deny_extensions <span class="token operator">=</span> IGNORED_EXTENSIONS        self<span class="token punctuation">.</span>deny_extensions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'.'</span> <span class="token operator">+</span> e <span class="token keyword">for</span> e <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>deny_extensions<span class="token punctuation">)</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>restrict_text <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _re_type<span class="token punctuation">)</span> <span class="token keyword">else</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                              <span class="token keyword">for</span> x <span class="token keyword">in</span> arg_to_iter<span class="token punctuation">(</span>restrict_text<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">_link_allowed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> _is_valid_url<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_res <span class="token operator">and</span> <span class="token operator">not</span> _matches<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>allow_res<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_res <span class="token operator">and</span> _matches<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_res<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        parsed_url <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_domains <span class="token operator">and</span> <span class="token operator">not</span> url_is_from_any_domain<span class="token punctuation">(</span>parsed_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>allow_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_domains <span class="token operator">and</span> url_is_from_any_domain<span class="token punctuation">(</span>parsed_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_extensions <span class="token operator">and</span> url_has_any_extension<span class="token punctuation">(</span>parsed_url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_extensions<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>restrict_text <span class="token operator">and</span> <span class="token operator">not</span> _matches<span class="token punctuation">(</span>link<span class="token punctuation">.</span>text<span class="token punctuation">,</span> self<span class="token punctuation">.</span>restrict_text<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">matches</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_domains <span class="token operator">and</span> <span class="token operator">not</span> url_is_from_any_domain<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>allow_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_domains <span class="token operator">and</span> url_is_from_any_domain<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>deny_domains<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        allowed <span class="token operator">=</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> regex <span class="token keyword">in</span> self<span class="token punctuation">.</span>allow_res<span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_res <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span>        denied <span class="token operator">=</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> regex <span class="token keyword">in</span> self<span class="token punctuation">.</span>deny_res<span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>deny_res <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> any<span class="token punctuation">(</span>allowed<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> any<span class="token punctuation">(</span>denied<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_process_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> links<span class="token punctuation">)</span><span class="token punctuation">:</span>        links <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> links <span class="token keyword">if</span> self<span class="token punctuation">.</span>_link_allowed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>canonicalize<span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                link<span class="token punctuation">.</span>url <span class="token operator">=</span> canonicalize_url<span class="token punctuation">(</span>link<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        links <span class="token operator">=</span> self<span class="token punctuation">.</span>link_extractor<span class="token punctuation">.</span>_process_links<span class="token punctuation">(</span>links<span class="token punctuation">)</span>        <span class="token keyword">return</span> links    <span class="token keyword">def</span> <span class="token function">_extract_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>link_extractor<span class="token punctuation">.</span>_extract_links<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Top-level imports</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors<span class="token punctuation">.</span>lxmlhtml <span class="token keyword">import</span> LxmlLinkExtractor <span class="token keyword">as</span> LinkExtractor  </code></pre></li></ul><ul><li><h4 id="引用-HTMLTranslator-类"><a href="#引用-HTMLTranslator-类" class="headerlink" title="引用 HTMLTranslator 类"></a>引用 HTMLTranslator 类</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HTMLTranslator</span><span class="token punctuation">(</span>TranslatorMixin<span class="token punctuation">,</span> OriginalHTMLTranslator<span class="token punctuation">)</span><span class="token punctuation">:</span>    @lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">css_to_xpath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> css<span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">'descendant-or-self::'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span>HTMLTranslator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>css_to_xpath<span class="token punctuation">(</span>css<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span></code></pre><ul><li>css 转换 xpath</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
            <tag> Lagou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>devise mysql table</title>
      <link href="/2020/06/28/Python/crawler/lagou/devise%20mysql%20table/"/>
      <url>/2020/06/28/Python/crawler/lagou/devise%20mysql%20table/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-表结构设计"><a href="#MySQL-表结构设计" class="headerlink" title="MySQL 表结构设计"></a>MySQL 表结构设计</h3><ul><li><p>分析网站数据，制定合理的表结构</p><p><img src="https://i.loli.net/2020/06/18/4IemkD7ZC6vVpzg.png" alt="如图所示"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Practice </tag>
            
            <tag> Lagou </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
