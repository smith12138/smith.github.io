{"meta":{"title":"清风明月","subtitle":"","description":"","author":"MingHui","url":"http://yoursite.com","root":"/"},"posts":[{"tags":[{"name":"Basics","slug":"Basics","permalink":"http://yoursite.com/tags/Basics/"}],"title":"MySQL基础语法","date":"2020/06/28","text":"查看库，表，内容 查看MySQL版本号 mysql -V or mysql --version 查看当前所有库 SHOW databases; 进入数据库 USE db_name; 查看当前所有表 SHOW TABLES; SHOW TABLES from db_name; # 查看指定库的表 查看表内容 SELECT * FROM table_name; 创建表，以及字段 CREATE TABLE table_name( Id int(10), # 字段|类型 Name varchar(20)); # 字段|类型 查看所在库 SELECT database(); 查看表结构 DESC table_name; 插入数据 INSERT INTO table_name(id, name) value(1, “mack”); 修改数据 UPDATE table_name SET name=”jack” WHERE id=1; 删除表数据 DELETE FROM table_name WHERE id=1; 基础查询 语法： SELECT field FROM table_name; 特点：查询列表可以是：表中的字段，常量值，表达式，函数 查询表中的单个字段 SELECT field1 FROM table_name; 查询表中多个字段 SELECT field1, field2 from table_name; 查询表中所有字段 SELECT * FROM table_name; 区分关键字与字段 字段名前后加入 ` 符号 查询常量值 SELECT 100; SELECT ‘join’; 查询表达式 SELECT 100*100; 查询函 SELECT version(); 调用version函数返回版本号 赋予别名，改变字段名称 利于理解 如果查询的字段存在重名，使用别名可以进行区分方法一 Select version() as one; 方法二 ``` select version() one; select version() “one pic”; ``` +号的作用 加法运算 SELECT ‘join’ + 100; 输出结果：100 其中一方为字符串，则转换类型，转换失败则置0处理 若一方为Null，则结果为Null DISTINCT-去重 SELECT DICTINCT 字段名 FROM 表名; CONCAT-连接查询字段 SELECT CONCAT(field1, ‘,’ field2) as 列名 FROM table_name; IFNULL-判空函数 SELECT IFNULL(字段名, 0) FROM table_name; 第一个参数为Null，则替换为第二个参数 条件查询 语法 Select 查询字段 from 表名 where 筛选条件; 按条件表达式筛选条件运算符：&gt; &lt; &gt;= &lt;= != &lt;&gt; = 案例1：查询工资&gt;12000的员工信息 SELECT * FROM table_name W salary > 12000; 案例2：查询部分编号!=90的员工名和部门编号 SELECT last_name, first_name, department_id FROM employees WHERE department &lt;> 90; 按逻辑表达式筛选逻辑运算符：And or not 案例1：查询工资在10000到20000之间的员工名，工资，奖金信息 SELECT last_name, salary, commission_pct FROM employees WHERE salary > 10000 AND salary &lt; 20000; 案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息 SELECT * FROM employees WHERE department_id > 110 OR department_id &lt; 90 OR salary > 15000; 因为 &gt;110 与 &lt;90条件不冲突，以及salary字段&gt;15000最后才执行 模糊查询关键字：like，between and，in，is null like：一般和通配符配合使用 案例1：查询员工名中包含字符a的员工信息 select * From employees Where last_name like ‘%a%’; 字符串必须使用单引号，%代表通配符，任意字符，包含0个字符 扩展知识Mysql报错1366 解决方案：修改此表的字符集 分别操作：查看表中每个字段的字符集，修改表中的字段的字符集 查看表结构：show full columns from 表名; 改变表结构：alter table 表名 convert to character set utf8; 创建用户和授权在mysql8.0创建用户和授权和之前不太一样了，其实严格上来讲，也不能说是不一样,只能说是更严格,mysql8.0需要先创建用户和设置密码,然后才能授权. 先创建一个用户 create user 'tone'@'%' identified by '123123'; 进行授权 grant all privileges on *.* to 'tone'@'%' with grant option; 如果还是用原来5.7的那种方式，会报错误： grant all privileges on *.* to 'tome'@'%' identified by '123123'; 抛出错误： ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;identified by &#39;123123&#39;&#39; at line 1 MySQL8.0 的远程链接MySQL 安装完成后只支持 localhost 访问，我们必须设置一下才可以远程访问，另外还有一些 MySQL 8.0 连接时的一些问题. 登录MySQL mysql -u root -p 输入您的密码，选择 mysql 数据库 use mysql; 因为 mysql 数据库中存储了用户信息的 user 表，在 mysql 数据库的 user 表中查看当前 root 用户的相关信息 select host, user, authentication_string, plugin from user; 执行完上面的命令后会显示一个表格，查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。授权 root 用户的所有权限并设置远程访问 GRANT ALL ON *.* TO 'root'@'%'; GRANT ALL ON 表示所有权限，% 表示通配所有 host，可以访问远程。 ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '你自己的密码'; 刷新权限所有操作后，应执行 flush privileges; 查看 root 用户的 host use mysql; select host, user, authentication_string, plugin from user; 发现 root 用户的 host 已经变成 %，说明我们的修改已经成功，可以远程访问了。 访问数据库 远程访问数据库的GUI工具比较多如：Navicat、SQLyog、MySQL workbench 等，我这里使用 Navicat 输入访问的 host 和密码，报 2059 错误，这是因为 MySql8.0 版本 和 5.7 的加密规则不一样，而现在的可视化工具只支持旧的加密方式。 出现这个原因是mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password.解决问题方法有两种,一种是升级navicat驱动,一种是把mysql用户登录密码加密规则还原成mysql_native_password. ​ 这里采用第二种方式 ： ​ 修改加密规则: ALTER USER 'root'@'%' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; password 为你当前密码。 ​ 更新 root 用户密码: ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; password 为你新设置的密码。 ​ 刷新权限: FLUSH PRIVILEGES; ​ OK，设置完成，再次使用 Navicat 连接数据库","permalink":"http://yoursite.com/2020/06/28/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","photos":[]}],"categories":[],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://yoursite.com/tags/Basics/"}]}