{"meta":{"title":"清风明月","subtitle":"","description":"","author":"MingHui","url":"http://yoursite.com","root":"/"},"posts":[{"tags":[{"name":"Basics","slug":"Basics","permalink":"http://yoursite.com/tags/Basics/"}],"title":"Git基础命令","date":"2020/06/30","text":"一．Git基础1．Git介绍 Git是目前世界上最先进的分布式版本控制系统 版本控制系统： 记录每个迭代版本的信息 版本号 文件名 操作用户 日志 修改时间 1 Test.py well 修改标题 2020/04/18/17:15 2 Test.py jack 优化性能 2020/04/18/18:00 3 Test.py esion 修复bug 2020/04/18/19:15 4 Test.py jack 功能更新 2020/04/18/20:15 2．Git与Github2.1.两者区别 Git 是一个分布式版本控制系统，简单来说它就是一个软件，用于记录一个或多干个文件迭代信息，以便将来查阅某个版本修订情况的软件 Github 是一个为用户提供Git服务的网站，简单说就是一个可以存放代码的地方，也可以是其他东西，Github除了提供管理Git的Web界面外，还提供了订阅，关注，讨论组，在线编辑器等丰富的功能。 Github被称之为全球最大的基友网站。 3．Git安装3.1.下载安装包，进行安装3.2.默认安装即可，最后的view就不要勾选了 二．Git的使用1．本地仓库1.1. 工作流程 Git本地操作的三个区域-&gt;示意图： 工作流程-&gt;示意图： 1.2.本地仓库操作 什么是仓库呢？仓库又名为版本库，英文名repository，可以简单的理解成是一个目录，用于存放代码，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除等变更状态Git都能跟踪到。 在安装好后首次使用需要进行全局配置,进入Git bash here 进入Git命令行窗口，输入以下命令： Config --global user.name “xxx” 配置用户名 Config --global user.email “xxx” 配置邮箱 在多人协作项目中，用于身份的甄别 创建仓库 当我们需要让Git去管理某个新项目/已存在的项目，就需要创建仓库了。注意，创建仓库的目录不一定要求是空目录，选择一个非空目录也是可以的，但是不建议在现有的项目上来学习Git。 创建空目录 Mkdir file_name 进入目录 Git仓库初始化 Git init 生成git的隐式目录 1.3. \\Git常用指令** 查看当前状态 git status 添加至缓存区 添加一个文件 git add file_name添加多个文件 git add file_1 file_2 file_3添加全部文件 git add . 移除缓存区文件 移出一个文件 git rm -r --cached file_name移出多个文件 git rm -r --cached .移出全部文件 git rm -r --cached .idea 提交至版本库 git commit -m “更新内容描述” 1.4.版本回退 查看版本，确定需要回到的时间点 版本号仅会显示当前，以及当前以前的版本信息 commit bc22b1d47fe55db8901129da1f6c74fdbbddd5b8 (HEAD -&gt; master) 目前版本 获得详细版本状态信息 git log 获得版本提交编号，与注释内容，一行显示 git log --pretty=oneline 回退 git reset --hard 版本号 回退至历史版本后，在回退到当前，则需要查看历史操作，得到想要commit_id git reflog 小结： 回退各个时间段的版本，需获得commit id，进行 git reset –hard commit_id 再次回到当前版本，需要进行reflog直接获得历史操作，以及获得7位commit_id commit_id可以不用输入完整，git会自动识别，但也不能太少，可能会出现重复，至少写前4位字符 1.5. 忽略文件 应用场景 在项目目录下有很多万年不变的文件目录，例如css，js，images等，或者还有一些目录即便有改动，我们也不想让其提交到线上仓库。 实现流程 忽略文件需要新建一个名为.gitignore的规则文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录与子目录生效 注意：该文件没有文件名，没办法直接在windows目录下创建，可以通过命令行创建。 常见规则 过滤整个子目录 /mtk 过滤当前目录与子目录中.zip文件 *.zip 过滤具体文件 /mtk/.doc 不过滤该文件 ! Test.py 创建过滤文件 touch .gitignore 2.远程仓库线上仓库的操作学习以GIthub为例 线上仓库创建，两种常规使用方式 基于http协议 创建空目录，名称就称为WellHome Mkdir WellHome 使用clone指令，克隆线上仓库到本地 git clone source.git 仓库基本操作（提交暂存区，提交本地仓库，提交线上仓库，拉取线上仓库） 提交当线上仓库的指令 git push 若提交后，返回requested 403 因为需要鉴权，则需要权限 需要修改配置文件，在请求url 中添加用户名与密码 拉取线上仓库 git pull 在每天工作的第一件事 git pull 每天下班时做的最后一件事 git push 基于SSH协议 需安装OpenSSH（推荐使用） Https与SSH协议区别：该方式与前面https方式相比，至少影响github对于用户的身份鉴权方式，对于git 的具体操作（如提交本地，添加注释，提交远程等操作）没有任何影响 生成公私钥对指令（需自行安装OpenSSH） ssh-keygen -t rsa -C “注册邮箱”，直接回车继续，返回提示生成的公私钥对的路径 进入提示目录下，找到公钥文件，添加到github中，并编写title clone 仓库 git clone git_ssh地址 — 返回提示yes or no 输入yes即可 分支管理 分支示意图 ​ 在版本回退的操作中，每次提交后都会有记录，Git把它们串成时间线，形成类型时间轴的存在，这个时间轴就是一个分支，我们称为master分支（主分支）。​ 在多人团队协作开发的项目中，一个分支是无法满足多人同时开发的需求的，并且分支上工作并不影响他人正常使用，会更加安全，Git鼓励开发者使用分支去完成开发任务。 分支相关指令 查看分支 git branch 创建分支 git branch 名称 切换分支 git checkout 名称 删除分支 git branch -d 名称 合并分支 git merge 被合并名称 冲突的产生与解决 当线上与本地仓内容不一致时，git会检测出来，并提示让你先pullPull后，git会自动合并代码在改文件中。 解决方法 与变更文件同事沟通，再进行操作 提醒 上班后同步线上代码 图形化管理工具 Github for Desktop Github出品，功能完善，界面简洁，使用方便。 Source tree 老牌Git GUI管理工具，也号称最好用的管理工具，功能丰富，基本操作和高级操作都非常流畅，适合初学者。 TortoiseGit 对于熟悉SVN的开发人员来说，这个小乌龟是非常友善了，简称tgit，中文名海龟Git， 它与前辈TortoiseSVN都是非常优秀的开源版本控制客户端软件。","permalink":"http://yoursite.com/2020/06/30/Git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","photos":[]},{"tags":[{"name":"Basics","slug":"Basics","permalink":"http://yoursite.com/tags/Basics/"}],"title":"MySQL基础语法","date":"2020/06/28","text":"查看库，表，内容 查看MySQL版本号 mysql -V or mysql --version 查看当前所有库 SHOW databases; 进入数据库 USE db_name; 查看当前所有表 SHOW TABLES; SHOW TABLES from db_name; # 查看指定库的表 查看表内容 SELECT * FROM table_name; 创建表，以及字段 CREATE TABLE table_name( Id int(10), # 字段|类型 Name varchar(20)); # 字段|类型 查看所在库 SELECT database(); 查看表结构 DESC table_name; 插入数据 INSERT INTO table_name(id, name) value(1, “mack”); 修改数据 UPDATE table_name SET name=”jack” WHERE id=1; 删除表数据 DELETE FROM table_name WHERE id=1; 基础查询 语法： SELECT field FROM table_name; 特点：查询列表可以是：表中的字段，常量值，表达式，函数 查询表中的单个字段 SELECT field1 FROM table_name; 查询表中多个字段 SELECT field1, field2 from table_name; 查询表中所有字段 SELECT * FROM table_name; 区分关键字与字段 字段名前后加入 ` 符号 查询常量值 SELECT 100; SELECT ‘join’; 查询表达式 SELECT 100*100; 查询函 SELECT version(); 调用version函数返回版本号 赋予别名，改变字段名称 利于理解 如果查询的字段存在重名，使用别名可以进行区分方法一 Select version() as one; 方法二 ``` select version() one; select version() “one pic”; ``` +号的作用 加法运算 SELECT ‘join’ + 100; 输出结果：100 其中一方为字符串，则转换类型，转换失败则置0处理 若一方为Null，则结果为Null DISTINCT-去重 SELECT DICTINCT 字段名 FROM 表名; CONCAT-连接查询字段 SELECT CONCAT(field1, ‘,’ field2) as 列名 FROM table_name; IFNULL-判空函数 SELECT IFNULL(字段名, 0) FROM table_name; 第一个参数为Null，则替换为第二个参数 条件查询 语法 Select 查询字段 from 表名 where 筛选条件; 按条件表达式筛选条件运算符：&gt; &lt; &gt;= &lt;= != &lt;&gt; = 案例1：查询工资&gt;12000的员工信息 SELECT * FROM table_name W salary > 12000; 案例2：查询部分编号!=90的员工名和部门编号 SELECT last_name, first_name, department_id FROM employees WHERE department &lt;> 90; 按逻辑表达式筛选逻辑运算符：And or not 案例1：查询工资在10000到20000之间的员工名，工资，奖金信息 SELECT last_name, salary, commission_pct FROM employees WHERE salary > 10000 AND salary &lt; 20000; 案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息 SELECT * FROM employees WHERE department_id > 110 OR department_id &lt; 90 OR salary > 15000; 因为 &gt;110 与 &lt;90条件不冲突，以及salary字段&gt;15000最后才执行 模糊查询关键字：like，between and，in，is null like：一般和通配符配合使用 案例1：查询员工名中包含字符a的员工信息 select * From employees Where last_name like ‘%a%’; 字符串必须使用单引号，%代表通配符，任意字符，包含0个字符 扩展知识Mysql报错1366 解决方案：修改此表的字符集 分别操作：查看表中每个字段的字符集，修改表中的字段的字符集 查看表结构：show full columns from 表名; 改变表结构：alter table 表名 convert to character set utf8; 创建用户和授权在mysql8.0创建用户和授权和之前不太一样了，其实严格上来讲，也不能说是不一样,只能说是更严格,mysql8.0需要先创建用户和设置密码,然后才能授权. 先创建一个用户 create user 'tone'@'%' identified by '123123'; 进行授权 grant all privileges on *.* to 'tone'@'%' with grant option; 如果还是用原来5.7的那种方式，会报错误： grant all privileges on *.* to 'tome'@'%' identified by '123123'; 抛出错误： ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;identified by &#39;123123&#39;&#39; at line 1 MySQL8.0 的远程链接MySQL 安装完成后只支持 localhost 访问，我们必须设置一下才可以远程访问，另外还有一些 MySQL 8.0 连接时的一些问题. 登录MySQL mysql -u root -p 输入您的密码，选择 mysql 数据库 use mysql; 因为 mysql 数据库中存储了用户信息的 user 表，在 mysql 数据库的 user 表中查看当前 root 用户的相关信息 select host, user, authentication_string, plugin from user; 执行完上面的命令后会显示一个表格，查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。授权 root 用户的所有权限并设置远程访问 GRANT ALL ON *.* TO 'root'@'%'; GRANT ALL ON 表示所有权限，% 表示通配所有 host，可以访问远程。 ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '你自己的密码'; 刷新权限所有操作后，应执行 flush privileges; 查看 root 用户的 host use mysql; select host, user, authentication_string, plugin from user; 发现 root 用户的 host 已经变成 %，说明我们的修改已经成功，可以远程访问了。 访问数据库 远程访问数据库的GUI工具比较多如：Navicat、SQLyog、MySQL workbench 等，我这里使用 Navicat 输入访问的 host 和密码，报 2059 错误，这是因为 MySql8.0 版本 和 5.7 的加密规则不一样，而现在的可视化工具只支持旧的加密方式。 出现这个原因是mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password.解决问题方法有两种,一种是升级navicat驱动,一种是把mysql用户登录密码加密规则还原成mysql_native_password. ​ 这里采用第二种方式 ： ​ 修改加密规则: ALTER USER 'root'@'%' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; password 为你当前密码。 ​ 更新 root 用户密码: ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; password 为你新设置的密码。 ​ 刷新权限: FLUSH PRIVILEGES; ​ OK，设置完成，再次使用 Navicat 连接数据库","permalink":"http://yoursite.com/2020/06/28/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","photos":[]}],"categories":[],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://yoursite.com/tags/Basics/"}]}